<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DaiDai_Blog</title>
  
  <subtitle>Find the bug of the world!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.fuweihu.xyz/"/>
  <updated>2019-08-05T09:03:46.542Z</updated>
  <id>https://www.fuweihu.xyz/</id>
  
  <author>
    <name>Dai Dai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python直接根据URL直接调用远程代码</title>
    <link href="https://www.fuweihu.xyz/2019/08/05/Python%E7%9B%B4%E6%8E%A5%E6%A0%B9%E6%8D%AEURL%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81/"/>
    <id>https://www.fuweihu.xyz/2019/08/05/Python直接根据URL直接调用远程代码/</id>
    <published>2019-08-05T09:10:00.000Z</published>
    <updated>2019-08-05T09:03:46.542Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment"># File Name: load_code.py</span></span><br><span class="line"><span class="comment"># Author: DaiDai</span></span><br><span class="line"><span class="comment"># Mail: daidai4269@aliyun.com</span></span><br><span class="line"><span class="comment"># Created Time: Fri 02 Aug 2019 04:41:19 PM CST</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">TODO:</span></span><br><span class="line"><span class="string">    proxy</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">from load_code import LoadCode</span></span><br><span class="line"><span class="string">LoadCode("xxx/xxx")  # py code url, xxx is a url</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.version &lt; <span class="string">'3'</span>:</span><br><span class="line">    VERSION = <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    VERSION = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GITHUB = <span class="string">"https://raw.githubusercontent.com/"</span></span><br><span class="line">GITEE = <span class="string">""</span>  <span class="comment"># TODO</span></span><br><span class="line">GITLAB = <span class="string">""</span>  <span class="comment"># TODO</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadCode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        url = os.path.join(GITHUB, url)</span><br><span class="line">        code = requests.get(url).text</span><br><span class="line">        <span class="keyword">if</span> VERSION == <span class="number">3</span>:  <span class="comment"># for print</span></span><br><span class="line">            exec(<span class="string">"from __future__ import print_function"</span>)</span><br><span class="line">        exec(code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="Python" scheme="https://www.fuweihu.xyz/categories/Python/"/>
    
    
      <category term="Python" scheme="https://www.fuweihu.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python3.x load module path error</title>
    <link href="https://www.fuweihu.xyz/2019/07/21/Python_load_module_path_config/"/>
    <id>https://www.fuweihu.xyz/2019/07/21/Python_load_module_path_config/</id>
    <published>2019-07-21T09:08:00.000Z</published>
    <updated>2019-07-21T09:08:53.940Z</updated>
    
    <content type="html"><![CDATA[<p>Program execute display like this error: <code>ImportError: No module named &#39;xxx&#39;</code> also you used like this code: <code>from .xxx import xxx</code> or <code>from ..xxx import xxx</code>.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><ul><li><p><code>module/</code></p><ul><li><code>__init__.py</code></li><li><p><code>A/</code></p><ul><li><code>__init__.py</code></li><li><code>a.py</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">  print(<span class="string">"A.a"</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>B/</code></p><ul><li><code>__init__.py</code></li><li><code>b.py</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ..A.a <span class="keyword">import</span> func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><code>main.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module.B <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure></li></ul><p>This code will display error when running <code>python3 b.py</code>. I think maybe Python3 Interpreter not support this grammar.<br>And code will display error when running <code>python3 main.py</code>. if you use <code>sys.paths.append(&quot;../&quot;)</code> or <code>sys.paths.append(&quot;./&quot;)</code> like this code, still a mistake. Because program when load module abspath is main.py file, not b.py file. And <code>C++ /C</code> language is not such.</p><h3 id="Solve-Method"><a href="#Solve-Method" class="headerlink" title="Solve Method"></a>Solve Method</h3><ul><li><code>__file__</code> return current file path</li><li><code>os.path.abspath(path)</code>  return file abspath</li><li><code>os.path.dirname()</code>  return folder abspath</li><li><code>os.path.join()</code>  join path</li></ul><p>load upward one level catalog path: <code>os.path.abspath(os.path.join(os.path.dirname(__file__), &quot;../&quot;))</code><br>load upward two level catalog path: <code>os.path.abspath(os.path.join(os.path.dirname(__file__), &quot;../../&quot;))</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Program execute display like this error: &lt;code&gt;ImportError: No module named &amp;#39;xxx&amp;#39;&lt;/code&gt; also you used like this code: &lt;code&gt;from
      
    
    </summary>
    
      <category term="Python" scheme="https://www.fuweihu.xyz/categories/Python/"/>
    
    
      <category term="Python" scheme="https://www.fuweihu.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>C++ Header File</title>
    <link href="https://www.fuweihu.xyz/2019/07/13/C++_header_file/"/>
    <id>https://www.fuweihu.xyz/2019/07/13/C++_header_file/</id>
    <published>2019-07-13T14:18:00.000Z</published>
    <updated>2019-07-13T14:03:00.178Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><code>*.h</code> file</p><ul><li>include<ul><li>state variable(header file can define variable, but should be do it)</li><li>state class / function / templete</li><li>const / extern</li><li>inline function</li></ul></li><li>exclude<ul><li><code>using namespace std;</code> or <code>namespace xxx {}</code>, should be used <code>std::cout</code></li><li>define anything</li></ul></li></ul></li><li><p><code>hello.hpp</code></p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HELLO_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HELLO_H</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// HELLO_H</span></span></span><br></pre></td></tr></table></figure><ul><li><code>hello.cpp</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hello"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>main.cpp</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hello.hpp"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  hello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>bash</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>&gt; g++ -std=c++11 main.cpp hello.cpp</span><br><span class="line"><span class="meta">&gt;</span>&gt; ./a.out</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;*.h&lt;/code&gt; file&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;include&lt;ul&gt;
&lt;li&gt;state variable(header file can define variable, but should be do it)&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="C++" scheme="https://www.fuweihu.xyz/categories/C/"/>
    
    
      <category term="Grammar" scheme="https://www.fuweihu.xyz/tags/Grammar/"/>
    
  </entry>
  
  <entry>
    <title>C++ Summary</title>
    <link href="https://www.fuweihu.xyz/2019/07/04/C++_Summary/"/>
    <id>https://www.fuweihu.xyz/2019/07/04/C++_Summary/</id>
    <published>2019-07-03T16:15:00.000Z</published>
    <updated>2019-07-03T16:19:55.988Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Basic-Grammar"><a href="#Basic-Grammar" class="headerlink" title="Basic Grammar"></a>Basic Grammar</h3><ul><li style="list-style: none"><input type="checkbox" checked> annotation<ul><li><code>//</code></li><li><code>/* note */</code></li></ul></li><li style="list-style: none"><input type="checkbox" checked> variable, constant<ul><li style="list-style: none"><input type="checkbox" checked> type<ul><li><code>bool</code>, <code>char</code>, <code>int</code>, <code>float</code>, <code>double</code>, <code>wchar_t</code>, <code>void</code></li><li>decorate: <code>signed</code>, <code>unsigned</code>, <code>long</code>, <code>short</code>, <code>const</code>, <code>volatile</code>, <code>restrict</code></li></ul></li><li style="list-style: none"><input type="checkbox" checked> define</li><li style="list-style: none"><input type="checkbox" checked> global, local</li></ul></li><li style="list-style: none"><input type="checkbox" checked> storage class: <code>auto</code>, <code>register</code>, <code>static</code>, <code>extern</code>, <code>mutable</code>, <code>thread_local (C++ 11)</code></li><li style="list-style: none"><input type="checkbox" checked> operator<ul><li>arithmetic: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>++</code>, <code>--</code></li><li>relational: <code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code></li><li>logical: <code>&amp;&amp;</code>, <code>||</code>, <code>!</code></li><li>bitwise: , <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>~</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code></li><li>assignment: , <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&amp;=</code>, <code>^=</code>, <code>|=</code></li><li>miscellaneous: , <code>sizeof</code>, <code>Condition ? X : Y</code>, <code>,</code>, <code>.</code>, <code>-&gt;</code>, <code>Cast</code>: (<code>const_cast&lt;type&gt; (expr)</code>, <code>dynamic_cast&lt;type&gt; (expr)</code>, <code>reinterpret_cast&lt;type&gt; (expr)</code>, <code>static_cast&lt;type&gt; (expr)</code>), <code>&amp;</code>, <code>*</code></li></ul></li><li style="list-style: none"><input type="checkbox" checked> loop: <code>for</code>, <code>while</code>, <code>do while</code>; control sentence: <code>break</code>, <code>continue</code>, <code>goto</code></li><li style="list-style: none"><input type="checkbox" checked> judge: <code>if</code>, <code>if else</code>, <code>switch</code>, <code>? :</code></li><li style="list-style: none"><input type="checkbox" checked> function:<ul><li>define, statement, call funciton by (value, pointer, quote)</li><li>Lambda function: <code>[capture](parameters) -&gt; return_type {body}</code></li></ul></li><li style="list-style: none"><input type="checkbox" checked> number, array, string</li><li style="list-style: none"><input type="checkbox" checked> pointer: (<code>Null pointer</code>, <code>pointer arithmetic operation</code>, <code>pointer array</code>, <code>a pointer to a pointer</code>, <code>pointer parameter to function</code>, <code>return pointer from function</code>), quote: (<code>quote parameter to function</code>, <code>return quote from function</code>)</li><li style="list-style: none"><input type="checkbox" checked> date, time</li><li style="list-style: none"><input type="checkbox" checked> data struct: <code>struct</code>, <code>typedef</code>, <code>enum</code></li><li style="list-style: none"><input type="checkbox" checked> OOP</li><li>class<ul><li><code>member function</code>, <code>call decorate</code>: (<code>public</code>, <code>private</code>, <code>protected</code>), <code>constructor function</code>, <code>destructive function</code>, <code>copy constructor function</code>, <code>friend function</code>, <code>inline function</code>, <code>static function</code>, <code>pointer to class</code>, <code>this pointer</code></li><li>inherit: <code>derived class</code>, <code>multiple inheritance</code></li><li><code>function overloading</code>, <code>operation overloading</code></li></ul></li><li>polymorphic: <code>virtual function</code>, <code>pure virtual function</code></li><li style="list-style: none"><input type="checkbox" checked> error deal: <code>try catch</code>, <code>throw</code></li><li style="list-style: none"><input type="checkbox" checked> dynamic memory: (<code>new</code>, <code>delete</code>), new: <code>1d array</code>, <code>2d array</code>, <code>3d array</code>,<code>object</code><ul><li><code>stack</code>: all variables inside the function occupy stack memory</li><li><code>heap</code>: this is program not used memory, it can be used to allocate memory dynamically when the program is running.</li></ul></li><li style="list-style: none"><input type="checkbox" checked> namespace: <code>using</code>, <code>namespace</code>, <code>using namespace</code></li><li style="list-style: none"><input type="checkbox" checked> template: <code>template function</code>, <code>template class</code></li><li style="list-style: none"><input type="checkbox" checked> pretreatment: <code>#define</code>, parametric macros, conditional compliastion: <code>#ifdef</code> <code>#endif</code> <code>#if</code>, <code>#</code> and <code>##</code>, macros predefined: <code>__LINE__</code>, <code>__FILE__</code>, <code>__DATE__</code>, <code>__TIME__</code></li><li style="list-style: none"><input type="checkbox" checked> thread: <code>#include &lt;thread&gt;</code></li></ul><h3 id="Library"><a href="#Library" class="headerlink" title="Library"></a>Library</h3><ul><li>STL: <code>vector</code>, <code>set</code>, etc</li><li>I/O: <code>#include &lt;filesystem&gt;</code></li><li>network: .</li><li>process: <code>fork()</code></li></ul><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><ul><li><a href="https://seisman.github.io/how-to-write-makefile/index.html" target="_blank" rel="noopener">Makefile</a></li><li><a href="https://cmake.org/documentation/" target="_blank" rel="noopener">CMake</a></li><li><a href="https://www.gnu.org/software/gdb/documentation/" target="_blank" rel="noopener">GDB</a></li><li><a href="https://github.com/google/styleguide/blob/gh-pages/cpplint/cpplint.py" target="_blank" rel="noopener">cpplint.py</a></li><li><a href="https://github.com/google/styleguide" target="_blank" rel="noopener">Google C++ code style</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Basic-Grammar&quot;&gt;&lt;a href=&quot;#Basic-Grammar&quot; class=&quot;headerlink&quot; title=&quot;Basic Grammar&quot;&gt;&lt;/a&gt;Basic Grammar&lt;/h3&gt;&lt;ul&gt;
&lt;li style=&quot;list-style: n
      
    
    </summary>
    
      <category term="C++" scheme="https://www.fuweihu.xyz/categories/C/"/>
    
    
      <category term="Grammar" scheme="https://www.fuweihu.xyz/tags/Grammar/"/>
    
  </entry>
  
  <entry>
    <title>ReadSourceCode——howdoi</title>
    <link href="https://www.fuweihu.xyz/2019/06/22/%E8%AF%BB%E6%BA%90%E7%A0%81%E2%80%94%E2%80%94howdoi/"/>
    <id>https://www.fuweihu.xyz/2019/06/22/读源码——howdoi/</id>
    <published>2019-06-22T14:18:00.000Z</published>
    <updated>2019-06-22T14:13:22.570Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>用户执行.py文件 -&gt; 获取命令行输入的参数 -&gt; 获取搜索关键词 –&gt; 通过爬虫找到 stackoverflow 上的答案(html 格式) –&gt; 对 html 进行解析拿到答案</p><ul><li>关键词<ul><li>必须从终端获取，这一步可以通过 Python 自带的包 argparse 实现。</li></ul></li><li>爬虫<ul><li>而爬虫部分，则使用包 requests ，其中 url 采用的是 google 搜索的 url</li></ul></li><li>解析 html<ul><li>采用的工具是 pyquery，它可以让使用者像使用 jquery 一样解析 html 代码。</li></ul></li><li>代理</li><li>缓存<ul><li>直接将内容存在本地的文件夹</li></ul></li><li>颜色输出</li></ul><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># howdoi - instant coding answers via the command line</span></span><br><span class="line"><span class="comment"># written by Benjamin Gleitzman (gleitz@mit.edu)</span></span><br><span class="line"><span class="comment"># inspired by Rich Jones (rich@anomos.info)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">######################################################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function  <span class="comment"># python2.x和python3.x中print括号的兼容</span></span><br><span class="line"><span class="keyword">import</span> gc</span><br><span class="line">gc.disable()  <span class="comment"># noqa: E402  # 关闭gc</span></span><br><span class="line"><span class="keyword">import</span> argparse  <span class="comment"># 获取命令行参数</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> appdirs  <span class="comment"># 用户数据目录</span></span><br><span class="line"><span class="keyword">import</span> re  <span class="comment"># 正则</span></span><br><span class="line"><span class="keyword">from</span> cachelib <span class="keyword">import</span> FileSystemCache, NullCache  <span class="comment"># 缓存</span></span><br><span class="line"><span class="keyword">import</span> requests  <span class="comment"># 用于http请求</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> __version__</span><br><span class="line"><span class="comment"># 用于控制台彩色高亮格式化输出</span></span><br><span class="line"><span class="keyword">from</span> pygments <span class="keyword">import</span> highlight</span><br><span class="line"><span class="keyword">from</span> pygments.lexers <span class="keyword">import</span> guess_lexer, get_lexer_by_name</span><br><span class="line"><span class="keyword">from</span> pygments.formatters.terminal <span class="keyword">import</span> TerminalFormatter</span><br><span class="line"><span class="keyword">from</span> pygments.util <span class="keyword">import</span> ClassNotFound</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq  <span class="comment"># 用于网页解析</span></span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> ConnectionError</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> SSLError</span><br><span class="line"><span class="comment"># 兼容Python2.x和Python3.x的库</span></span><br><span class="line"><span class="comment"># Handle imports for Python 2 and 3</span></span><br><span class="line"><span class="keyword">if</span> sys.version &lt; <span class="string">'3'</span>:</span><br><span class="line">    <span class="keyword">import</span> codecs</span><br><span class="line">    <span class="keyword">from</span> urllib <span class="keyword">import</span> quote <span class="keyword">as</span> url_quote</span><br><span class="line">    <span class="keyword">from</span> urllib <span class="keyword">import</span> getproxies</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Handling Unicode: http://stackoverflow.com/a/6633040/305414</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">u</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> codecs.unicode_escape_decode(x)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">from</span> urllib.request <span class="keyword">import</span> getproxies</span><br><span class="line">    <span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote <span class="keyword">as</span> url_quote</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">u</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># rudimentary standardized 3-level log output</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_print_err</span><span class="params">(x)</span>:</span> print(<span class="string">"[ERROR] "</span> + x)</span><br><span class="line">_print_ok = <span class="keyword">print</span>  <span class="comment"># noqa: E305</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_print_dbg</span><span class="params">(x)</span>:</span> print(<span class="string">"[DEBUG] "</span> + x)  <span class="comment"># noqa: E302</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.getenv(<span class="string">'HOWDOI_DISABLE_SSL'</span>):  <span class="comment"># Set http instead of https</span></span><br><span class="line">    SCHEME = <span class="string">'http://'</span></span><br><span class="line">    VERIFY_SSL_CERTIFICATE = <span class="keyword">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    SCHEME = <span class="string">'https://'</span></span><br><span class="line">    VERIFY_SSL_CERTIFICATE = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SUPPORTED_SEARCH_ENGINES = (<span class="string">'google'</span>, <span class="string">'bing'</span>)</span><br><span class="line"></span><br><span class="line">URL = os.getenv(<span class="string">'HOWDOI_URL'</span>) <span class="keyword">or</span> <span class="string">'stackoverflow.com'</span>  <span class="comment"># 设置目标问答网站</span></span><br><span class="line"><span class="comment"># 浏览器UA，用于伪造浏览器请求，防止网站对脚本请求进行屏蔽</span></span><br><span class="line">USER_AGENTS = (<span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:11.0) Gecko/20100101 Firefox/11.0'</span>,</span><br><span class="line">               <span class="string">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100 101 Firefox/22.0'</span>,</span><br><span class="line">               <span class="string">'Mozilla/5.0 (Windows NT 6.1; rv:11.0) Gecko/20100101 Firefox/11.0'</span>,</span><br><span class="line">               (<span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/536.5 (KHTML, like Gecko) '</span></span><br><span class="line">                <span class="string">'Chrome/19.0.1084.46 Safari/536.5'</span>),</span><br><span class="line">               (<span class="string">'Mozilla/5.0 (Windows; Windows NT 6.1) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.46'</span></span><br><span class="line">                <span class="string">'Safari/536.5'</span>), )</span><br><span class="line">SEARCH_URLS = &#123;</span><br><span class="line">    <span class="string">'bing'</span>: SCHEME + <span class="string">'www.bing.com/search?q=site:&#123;0&#125;%20&#123;1&#125;'</span>,</span><br><span class="line">    <span class="string">'google'</span>: SCHEME + <span class="string">'www.google.com/search?q=site:&#123;0&#125;%20&#123;1&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BLOCK_INDICATORS = (</span><br><span class="line">    <span class="string">'form id="captcha-form"'</span>,</span><br><span class="line">    <span class="string">'This page appears when Google automatically detects requests coming from your computer '</span></span><br><span class="line">    <span class="string">'network which appear to be in violation of the &lt;a href="//www.google.com/policies/terms/"&gt;Terms of Service'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">BLOCKED_QUESTION_FRAGMENTS = (</span><br><span class="line">    <span class="string">'webcache.googleusercontent.com'</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">STAR_HEADER = u(<span class="string">'\u2605'</span>)</span><br><span class="line">ANSWER_HEADER = u(<span class="string">'&#123;2&#125;  Answer from &#123;0&#125; &#123;2&#125;\n&#123;1&#125;'</span>)  <span class="comment"># 格式化答案输出</span></span><br><span class="line">NO_ANSWER_MSG = <span class="string">'&lt; no answer given &gt;'</span></span><br><span class="line"></span><br><span class="line">CACHE_EMPTY_VAL = <span class="string">"NULL"</span></span><br><span class="line">CACHE_DIR = appdirs.user_cache_dir(<span class="string">'howdoi'</span>)</span><br><span class="line">CACHE_ENTRY_MAX = <span class="number">128</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.getenv(<span class="string">'HOWDOI_DISABLE_CACHE'</span>):  <span class="comment"># 设置缓存文件路径</span></span><br><span class="line">    cache = NullCache()  <span class="comment"># works like an always empty cache</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    cache = FileSystemCache(CACHE_DIR, CACHE_ENTRY_MAX, default_timeout=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">howdoi_session = requests.session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlockError</span><span class="params">(RuntimeError)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_random_int</span><span class="params">(width)</span>:</span></span><br><span class="line">    bres = os.urandom(width)</span><br><span class="line">    <span class="keyword">if</span> sys.version &lt; <span class="string">'3'</span>:</span><br><span class="line">        ires = int(bres.encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ires = int.from_bytes(bres, <span class="string">'little'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ires</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_random_choice</span><span class="params">(seq)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> seq[_random_int(<span class="number">1</span>) % len(seq)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_proxies</span><span class="params">()</span>:</span>  <span class="comment"># 获取代理</span></span><br><span class="line">    proxies = getproxies()</span><br><span class="line">    filtered_proxies = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> proxies.items():</span><br><span class="line">        <span class="keyword">if</span> key.startswith(<span class="string">'http'</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> value.startswith(<span class="string">'http'</span>):</span><br><span class="line">                filtered_proxies[key] = <span class="string">'http://%s'</span> % value</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                filtered_proxies[key] = value</span><br><span class="line">    <span class="keyword">return</span> filtered_proxies</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_result</span><span class="params">(url)</span>:</span>  <span class="comment"># 获取结果</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> howdoi_session.get(url, headers=&#123;<span class="string">'User-Agent'</span>: _random_choice(USER_AGENTS)&#125;,</span><br><span class="line">                                  proxies=get_proxies(),</span><br><span class="line">                                  verify=VERIFY_SSL_CERTIFICATE).text</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.SSLError <span class="keyword">as</span> e:</span><br><span class="line">        _print_err(<span class="string">'Encountered an SSL Error. Try using HTTP instead of '</span></span><br><span class="line">                   <span class="string">'HTTPS by setting the environment variable "HOWDOI_DISABLE_SSL".\n'</span>)</span><br><span class="line">        <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_add_links_to_text</span><span class="params">(element)</span>:</span></span><br><span class="line">    hyperlinks = element.find(<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> hyperlink <span class="keyword">in</span> hyperlinks:</span><br><span class="line">        pquery_object = pq(hyperlink)</span><br><span class="line">        href = hyperlink.attrib[<span class="string">'href'</span>]</span><br><span class="line">        copy = pquery_object.text()</span><br><span class="line">        <span class="keyword">if</span> (copy == href):</span><br><span class="line">            replacement = copy</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            replacement = <span class="string">"[&#123;0&#125;](&#123;1&#125;)"</span>.format(copy, href)</span><br><span class="line">        pquery_object.replace_with(replacement)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_text</span><span class="params">(element)</span>:</span></span><br><span class="line">    <span class="string">''' return inner text in pyquery element '''</span></span><br><span class="line">    _add_links_to_text(element)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> element.text(squash_space=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span> TypeError:</span><br><span class="line">        <span class="keyword">return</span> element.text()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_extract_links_from_bing</span><span class="params">(html)</span>:</span></span><br><span class="line">    html.remove_namespaces()</span><br><span class="line">    <span class="keyword">return</span> [a.attrib[<span class="string">'href'</span>] <span class="keyword">for</span> a <span class="keyword">in</span> html(<span class="string">'.b_algo'</span>)(<span class="string">'h2'</span>)(<span class="string">'a'</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_extract_links_from_google</span><span class="params">(html)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [a.attrib[<span class="string">'href'</span>] <span class="keyword">for</span> a <span class="keyword">in</span> html(<span class="string">'.l'</span>)] <span class="keyword">or</span> \</span><br><span class="line">        [a.attrib[<span class="string">'href'</span>] <span class="keyword">for</span> a <span class="keyword">in</span> html(<span class="string">'.r'</span>)(<span class="string">'a'</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_extract_links</span><span class="params">(html, search_engine)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> search_engine == <span class="string">'bing'</span>:</span><br><span class="line">        <span class="keyword">return</span> _extract_links_from_bing(html)</span><br><span class="line">    <span class="keyword">return</span> _extract_links_from_google(html)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_search_url</span><span class="params">(search_engine)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> SEARCH_URLS.get(search_engine, SEARCH_URLS[<span class="string">'google'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_is_blocked</span><span class="params">(page)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> indicator <span class="keyword">in</span> BLOCK_INDICATORS:</span><br><span class="line">        <span class="keyword">if</span> page.find(indicator) != <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_links</span><span class="params">(query)</span>:</span>  <span class="comment"># 获取google搜索结果中的连接</span></span><br><span class="line">    search_engine = os.getenv(<span class="string">'HOWDOI_SEARCH_ENGINE'</span>, <span class="string">'google'</span>)</span><br><span class="line">    search_url = _get_search_url(search_engine)</span><br><span class="line"></span><br><span class="line">    result = _get_result(search_url.format(URL, url_quote(query)))</span><br><span class="line">    <span class="keyword">if</span> _is_blocked(result):</span><br><span class="line">        _print_err(<span class="string">'Unable to find an answer because the search engine temporarily blocked the request. '</span></span><br><span class="line">                   <span class="string">'Please wait a few minutes or select a different search engine.'</span>)</span><br><span class="line">        <span class="keyword">raise</span> BlockError(<span class="string">"Temporary block by search engine"</span>)</span><br><span class="line"></span><br><span class="line">    html = pq(result)</span><br><span class="line">    <span class="keyword">return</span> _extract_links(html, search_engine)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_link_at_pos</span><span class="params">(links, position)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> links:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(links) &gt;= position:</span><br><span class="line">        link = links[position - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        link = links[<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> link</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_format_output</span><span class="params">(code, args)</span>:</span>  <span class="comment"># 代码格式化输出函数 渲染</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args[<span class="string">'color'</span>]:</span><br><span class="line">        <span class="keyword">return</span> code</span><br><span class="line">    lexer = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># try to find a lexer using the StackOverflow tags</span></span><br><span class="line">    <span class="comment"># or the query arguments</span></span><br><span class="line">    <span class="keyword">for</span> keyword <span class="keyword">in</span> args[<span class="string">'query'</span>].split() + args[<span class="string">'tags'</span>]:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            lexer = get_lexer_by_name(keyword)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> ClassNotFound:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># no lexer found above, use the guesser</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> lexer:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            lexer = guess_lexer(code)</span><br><span class="line">        <span class="keyword">except</span> ClassNotFound:</span><br><span class="line">            <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> highlight(code,</span><br><span class="line">                     lexer,</span><br><span class="line">                     TerminalFormatter(bg=<span class="string">'dark'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_is_question</span><span class="params">(link)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> fragment <span class="keyword">in</span> BLOCKED_QUESTION_FRAGMENTS:</span><br><span class="line">        <span class="keyword">if</span> fragment <span class="keyword">in</span> link:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> re.search(<span class="string">r'questions/\d+/'</span>, link)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_questions</span><span class="params">(links)</span>:</span>  <span class="comment"># 获取问题连接</span></span><br><span class="line">    <span class="keyword">return</span> [link <span class="keyword">for</span> link <span class="keyword">in</span> links <span class="keyword">if</span> _is_question(link)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_answer</span><span class="params">(args, links)</span>:</span>  <span class="comment"># 获取答案</span></span><br><span class="line">    link = get_link_at_pos(links, args[<span class="string">'pos'</span>])</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> link:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">if</span> args.get(<span class="string">'link'</span>):</span><br><span class="line">        <span class="keyword">return</span> link</span><br><span class="line"></span><br><span class="line">    cache_key = link</span><br><span class="line">    page = cache.get(link)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> page:</span><br><span class="line">        page = _get_result(link + <span class="string">'?answertab=votes'</span>)</span><br><span class="line">        cache.set(cache_key, page)</span><br><span class="line"></span><br><span class="line">    html = pq(page)</span><br><span class="line"></span><br><span class="line">    first_answer = html(<span class="string">'.answer'</span>).eq(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    instructions = first_answer.find(<span class="string">'pre'</span>) <span class="keyword">or</span> first_answer.find(<span class="string">'code'</span>)</span><br><span class="line">    args[<span class="string">'tags'</span>] = [t.text <span class="keyword">for</span> t <span class="keyword">in</span> html(<span class="string">'.post-tag'</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> instructions <span class="keyword">and</span> <span class="keyword">not</span> args[<span class="string">'all'</span>]:</span><br><span class="line">        text = get_text(first_answer.find(<span class="string">'.post-text'</span>).eq(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">elif</span> args[<span class="string">'all'</span>]:</span><br><span class="line">        texts = []</span><br><span class="line">        <span class="keyword">for</span> html_tag <span class="keyword">in</span> first_answer.items(<span class="string">'.post-text &gt; *'</span>):</span><br><span class="line">            current_text = get_text(html_tag)</span><br><span class="line">            <span class="keyword">if</span> current_text:</span><br><span class="line">                <span class="keyword">if</span> html_tag[<span class="number">0</span>].tag <span class="keyword">in</span> [<span class="string">'pre'</span>, <span class="string">'code'</span>]:</span><br><span class="line">                    texts.append(_format_output(current_text, args))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    texts.append(current_text)</span><br><span class="line">        text = <span class="string">'\n'</span>.join(texts)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        text = _format_output(get_text(instructions.eq(<span class="number">0</span>)), args)</span><br><span class="line">    <span class="keyword">if</span> text <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        text = NO_ANSWER_MSG</span><br><span class="line">    text = text.strip()</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_links_with_cache</span><span class="params">(query)</span>:</span></span><br><span class="line">    cache_key = query + <span class="string">"-links"</span></span><br><span class="line">    res = cache.get(cache_key)</span><br><span class="line">    <span class="keyword">if</span> res:</span><br><span class="line">        <span class="keyword">if</span> res == CACHE_EMPTY_VAL:</span><br><span class="line">            res = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    links = _get_links(query)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> links:</span><br><span class="line">        cache.set(cache_key, CACHE_EMPTY_VAL)</span><br><span class="line"></span><br><span class="line">    question_links = _get_questions(links)</span><br><span class="line">    cache.set(cache_key, question_links <span class="keyword">or</span> CACHE_EMPTY_VAL)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> question_links</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_instructions</span><span class="params">(args)</span>:</span>  <span class="comment"># 解析</span></span><br><span class="line">    question_links = _get_links_with_cache(args[<span class="string">'query'</span>])</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> question_links:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    only_hyperlinks = args.get(<span class="string">'link'</span>)</span><br><span class="line">    star_headers = (args[<span class="string">'num_answers'</span>] &gt; <span class="number">1</span> <span class="keyword">or</span> args[<span class="string">'all'</span>])</span><br><span class="line"></span><br><span class="line">    answers = []</span><br><span class="line">    initial_position = args[<span class="string">'pos'</span>]</span><br><span class="line">    spliter_length = <span class="number">80</span></span><br><span class="line">    answer_spliter = <span class="string">'\n'</span> + <span class="string">'='</span> * spliter_length + <span class="string">'\n\n'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> answer_number <span class="keyword">in</span> range(args[<span class="string">'num_answers'</span>]):</span><br><span class="line">        current_position = answer_number + initial_position</span><br><span class="line">        args[<span class="string">'pos'</span>] = current_position</span><br><span class="line">        link = get_link_at_pos(question_links, current_position)</span><br><span class="line">        answer = _get_answer(args, question_links)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> answer:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> only_hyperlinks:</span><br><span class="line">            answer = format_answer(link, answer, star_headers)</span><br><span class="line">        answer += <span class="string">'\n'</span></span><br><span class="line">        answers.append(answer)</span><br><span class="line">    <span class="keyword">return</span> answer_spliter.join(answers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_answer</span><span class="params">(link, answer, star_headers)</span>:</span>  <span class="comment"># 格式化回答</span></span><br><span class="line">    <span class="keyword">if</span> star_headers:</span><br><span class="line">        <span class="keyword">return</span> ANSWER_HEADER.format(link, answer, STAR_HEADER)</span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_clear_cache</span><span class="params">()</span>:</span>  <span class="comment"># 清除缓存</span></span><br><span class="line">    <span class="keyword">global</span> cache  <span class="comment"># 使用全部变量</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cache:</span><br><span class="line">        cache = FileSystemCache(CACHE_DIR, CACHE_ENTRY_MAX, <span class="number">0</span>)  <span class="comment"># 创建缓存</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cache.clear()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">howdoi</span><span class="params">(args)</span>:</span>  <span class="comment"># 脚本主函数</span></span><br><span class="line">    args[<span class="string">'query'</span>] = <span class="string">' '</span>.join(args[<span class="string">'query'</span>]).replace(<span class="string">'?'</span>, <span class="string">''</span>)</span><br><span class="line">    cache_key = str(args)</span><br><span class="line"></span><br><span class="line">    res = cache.get(cache_key)</span><br><span class="line">    <span class="keyword">if</span> res:  <span class="comment"># 缓存命中</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = _get_instructions(args)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> res:</span><br><span class="line">            res = <span class="string">'Sorry, couldn\'t find any help with that topic\n'</span></span><br><span class="line">        cache.set(cache_key, res)  <span class="comment"># 高速缓存</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">except</span> (ConnectionError, SSLError):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Failed to establish network connection\n'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_parser</span><span class="params">()</span>:</span>  <span class="comment"># 获取用户输入的命令行参数</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">'instant coding answers via the command line'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'query'</span>, metavar=<span class="string">'QUERY'</span>, type=str, nargs=<span class="string">'*'</span>,</span><br><span class="line">                        help=<span class="string">'the question to answer'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-p'</span>, <span class="string">'--pos'</span>, help=<span class="string">'select answer in specified position (default: 1)'</span>, default=<span class="number">1</span>, type=int)</span><br><span class="line">    parser.add_argument(<span class="string">'-a'</span>, <span class="string">'--all'</span>, help=<span class="string">'display the full text of the answer'</span>,</span><br><span class="line">                        action=<span class="string">'store_true'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-l'</span>, <span class="string">'--link'</span>, help=<span class="string">'display only the answer link'</span>,</span><br><span class="line">                        action=<span class="string">'store_true'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-c'</span>, <span class="string">'--color'</span>, help=<span class="string">'enable colorized output'</span>,</span><br><span class="line">                        action=<span class="string">'store_true'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-n'</span>, <span class="string">'--num-answers'</span>, help=<span class="string">'number of answers to return'</span>, default=<span class="number">1</span>, type=int)</span><br><span class="line">    parser.add_argument(<span class="string">'-C'</span>, <span class="string">'--clear-cache'</span>, help=<span class="string">'clear the cache'</span>,</span><br><span class="line">                        action=<span class="string">'store_true'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-v'</span>, <span class="string">'--version'</span>, help=<span class="string">'displays the current version of howdoi'</span>,</span><br><span class="line">                        action=<span class="string">'store_true'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-e'</span>, <span class="string">'--engine'</span>, help=<span class="string">'change search engine for this query only'</span>, dest=<span class="string">'search_engine'</span>,</span><br><span class="line">                        nargs=<span class="string">"?"</span>, default=<span class="string">'google'</span>, const=<span class="string">'bing'</span>) <span class="comment">#google if -e not specified, bing if -e specified without positional arg.</span></span><br><span class="line">    <span class="keyword">return</span> parser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">command_line_runner</span><span class="params">()</span>:</span>  <span class="comment"># 启动函数</span></span><br><span class="line">    parser = get_parser()  <span class="comment"># 获取参数</span></span><br><span class="line">    args = vars(parser.parse_args())  <span class="comment"># 获取参数的属性和属性值的字典对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'version'</span>]:</span><br><span class="line">        _print_ok(__version__)  <span class="comment"># 打印版本</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'clear_cache'</span>]:</span><br><span class="line">        <span class="keyword">if</span> _clear_cache():  <span class="comment"># 清除缓存</span></span><br><span class="line">            _print_ok(<span class="string">'Cache cleared successfully'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            _print_err(<span class="string">'Clearing cache failed'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args[<span class="string">'query'</span>]:  <span class="comment"># 用户没用输入选项的处理</span></span><br><span class="line">        parser.print_help()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.getenv(<span class="string">'HOWDOI_COLORIZE'</span>):</span><br><span class="line">        args[<span class="string">'color'</span>] = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'search_engine'</span>] != <span class="string">'google'</span>:  <span class="comment"># 搜索引擎设置</span></span><br><span class="line">        <span class="keyword">assert</span> args[<span class="string">'search_engine'</span>] <span class="keyword">in</span> SUPPORTED_SEARCH_ENGINES</span><br><span class="line">        os.environ[<span class="string">'HOWDOI_SEARCH_ENGINE'</span>] = args[<span class="string">'search_engine'</span>]</span><br><span class="line"></span><br><span class="line">    utf8_result = howdoi(args).encode(<span class="string">'utf-8'</span>, <span class="string">'ignore'</span>)</span><br><span class="line">    <span class="keyword">if</span> sys.version &lt; <span class="string">'3'</span>:  <span class="comment"># Python版本为2时转换编码</span></span><br><span class="line">        print(utf8_result)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># Write UTF-8 to stdout: https://stackoverflow.com/a/3603160</span></span><br><span class="line">        sys.stdout.buffer.write(utf8_result)  <span class="comment"># 输出结果</span></span><br><span class="line">    <span class="comment"># close the session to release connection</span></span><br><span class="line">    howdoi_session.close()  <span class="comment"># 关闭http连接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    command_line_runner()</span><br></pre></td></tr></table></figure><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><ul><li><a href="https://github.com/gleitz/howdoi" target="_blank" rel="noopener">howdoi</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;实现思路&quot;&gt;&lt;a href=&quot;#实现思路&quot; class=&quot;headerlink&quot; title=&quot;实现思路&quot;&gt;&lt;/a&gt;实现思路&lt;/h3&gt;&lt;p&gt;用户执行.py文件 -&amp;gt; 获取命令行输入的参数 -&amp;gt; 获取搜索关键词 –&amp;gt; 通过爬虫找到 stackove
      
    
    </summary>
    
      <category term="ReadSourceCode" scheme="https://www.fuweihu.xyz/categories/ReadSourceCode/"/>
    
    
      <category term="Read-Python-Code" scheme="https://www.fuweihu.xyz/tags/Read-Python-Code/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu搭梯子</title>
    <link href="https://www.fuweihu.xyz/2019/05/25/Ubuntu%E6%90%AD%E6%A2%AF%E5%AD%90/"/>
    <id>https://www.fuweihu.xyz/2019/05/25/Ubuntu搭梯子/</id>
    <published>2019-05-25T14:34:00.000Z</published>
    <updated>2019-05-25T14:30:48.286Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用pip安装安装shadowsocks"><a href="#使用pip安装安装shadowsocks" class="headerlink" title="使用pip安装安装shadowsocks"></a>使用pip安装安装shadowsocks</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python3-pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><h3 id="设置shadowsocks"><a href="#设置shadowsocks" class="headerlink" title="设置shadowsocks"></a>设置shadowsocks</h3><ul><li>执行<code>vim ~/.shadowsocks.json</code></li><li>然后在shadowsocks.json里面添加配置信息，如：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"my_server_ip"</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>: <span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>: my_server_port,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"my_password"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动sslocal"><a href="#启动sslocal" class="headerlink" title="启动sslocal"></a>启动sslocal</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sslocal -c ~/.shadowsocks.json</span><br></pre></td></tr></table></figure><h3 id="浏览器代理"><a href="#浏览器代理" class="headerlink" title="浏览器代理"></a>浏览器代理</h3><ul><li>安装插件<code>SwitchyOmega</code><ul><li><a href="https://github.com/FelisCatus/SwitchyOmega/releases/" target="_blank" rel="noopener">点击进入</a>，点击下载<code>SwitchyOmega_Chromium.crx</code>文件</li><li>将文件后缀名改为<code>.zip</code></li><li>新建文件夹<code>SwitchyOmega_Chromium</code>，解压到这个文件夹</li><li>Chrome 打开<code>chrome://extensions/</code>，选择开发者模式，把插件托进去安装</li></ul></li><li>配置 Proxy<ul><li><code>Server</code>填写<code>shadowsocks.json</code>配置中的<code>local_address</code></li><li><code>Port</code>填写<code>shadowsocks.json</code>配置中的<code>local_port</code></li><li>左边<code>Apply changes</code>保存</li></ul></li><li>配置<code>Auto Switch</code><ul><li><code>Rule list rules</code>的<code>Profile</code>填<code>proxy</code></li><li><code>Default的Profile</code>填<code>[Direct]</code></li><li><code>Rule List Format</code>选择<code>AutoProxy</code></li><li><code>Rule List URL</code>填写<code>gfwlist</code>的规则:<ul><li><code>https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</code></li></ul></li><li>下载规则文件<code>Download Profile Now</code></li><li>左边<code>Apply changes</code>保存</li></ul></li><li>启用 SwitchyOmega<ul><li>启用 SwitchyOmega 插件，选择 Auto Switch 模式就可以了。</li></ul></li></ul><h3 id="测试启动"><a href="#测试启动" class="headerlink" title="测试启动"></a>测试启动</h3><ul><li>后端启动：<code>sslocal -c /home/xx/Software/ShadowsocksConfig/shadowsocks.json -d start</code></li><li>后端停止：<code>sslocal -c /home/xx/Software/ShadowsocksConfig/shadowsocks.json -d stop</code></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://blog.huihut.com/2017/08/25/LinuxInstallConfigShadowsocksClient/" target="_blank" rel="noopener">Linux安装配置Shadowsocks客户端及开机自动启动</a></li><li><a href="http://tanqingbo.com/2017/07/19/Ubuntu%E4%BD%BF%E7%94%A8shadowsocks%E7%BF%BB%E5%A2%99/" target="_blank" rel="noopener">科学上网 | Ubuntu使用shadowsocks翻墙</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用pip安装安装shadowsocks&quot;&gt;&lt;a href=&quot;#使用pip安装安装shadowsocks&quot; class=&quot;headerlink&quot; title=&quot;使用pip安装安装shadowsocks&quot;&gt;&lt;/a&gt;使用pip安装安装shadowsocks&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="Tools" scheme="https://www.fuweihu.xyz/categories/Tools/"/>
    
    
      <category term="VPN" scheme="https://www.fuweihu.xyz/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>Momenta-Internship</title>
    <link href="https://www.fuweihu.xyz/2019/04/11/momenta_internship/"/>
    <id>https://www.fuweihu.xyz/2019/04/11/momenta_internship/</id>
    <published>2019-04-10T17:13:00.000Z</published>
    <updated>2019-04-14T17:49:11.900Z</updated>
    
    <content type="html"><![CDATA[<ul><li>用工卡记录下：</li></ul><p><img src="/2019/04/11/momenta_internship/employe-card.jpg" alt="employe card"></p><ul><li>公司大部分都是 T 480s 加 Ubuntu。</li><li>这里就要吐槽下了：<ul><li>桌面版本的使用了几天，终于见识到了流传已久的内部错误。</li><li>Ubuntu的显卡驱动好无语，风扇要起飞了。</li><li>安装显卡驱动也是个坑，搞得我又重装了一次系统。<ul><li>还有zsh虽然好用，但有时候也是个坑。</li></ul></li><li>很多办公软件不支持，deepin不是很稳定，安装后其他软件未必安装的上，坑。</li><li>又得学vim，这个学习成本有些高。</li><li>各种坑，都想申请mac了。。。</li></ul></li><li><p>现在基本是 <code>Ubuntu</code>(desktop system) + <code>Docker</code>(development environment) + <code>Vim</code>(coding) + <code>Tmux</code>(terminal) + <code>Oh-My-Zsh</code>(zsh or shell or bash) + <code>Git</code>(version) + <code>VScode</code>(review code) + <code>Pycharm</code>(move brick)</p><ul><li>sshfs</li><li>mount</li><li>etc.</li></ul></li><li><p>公司的展厅：</p></li></ul><p><img src="/2019/04/11/momenta_internship/company.jpg" alt="company"></p><ul><li>苏州的太湖：</li></ul><p><img src="/2019/04/11/momenta_internship/taihu-lake.jpg" alt="taihu lake"></p><ul><li>周六晚溜岗去了苏州大学（晚上12：00多了，没进去）。早上去的渔洋公园，从大门进没买票，这个可以的。</li><li>自己的域名要到期了，当时图便宜买的.xyz的，现在续费好贵。下次还是买.cn的吧。</li><li>kaggle的比赛也勉强10%，后面都没有时间做了，后面要加油了。</li><li>太晚了，瞎记录下吧</li></ul><hr><ul><li>Update</li><li><p>Time: 4.15 am 1:49</p></li><li><p>周六晚上公司的21楼和24楼还有这么多同事在加班：</p></li></ul><p><img src="/2019/04/11/momenta_internship/overtime.jpg" alt=""></p><ul><li>Town Hall:</li></ul><p><img src="/2019/04/11/momenta_internship/townhall.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;用工卡记录下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2019/04/11/momenta_internship/employe-card.jpg&quot; alt=&quot;employe card&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公司大部分都是 T 480s 加 
      
    
    </summary>
    
      <category term="Life" scheme="https://www.fuweihu.xyz/categories/Life/"/>
    
    
      <category term="Life" scheme="https://www.fuweihu.xyz/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Python 性能优化</title>
    <link href="https://www.fuweihu.xyz/2019/03/23/Python%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://www.fuweihu.xyz/2019/03/23/Python性能优化/</id>
    <published>2019-03-23T14:23:00.000Z</published>
    <updated>2019-03-23T14:12:17.526Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-性能优化"><a href="#Python-性能优化" class="headerlink" title="Python 性能优化"></a>Python 性能优化</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>主要优化方法：</p><ul><li>代码质量</li><li>代码性能分析<ul><li><code>cProfile</code>  测试CPU运行</li><li><code>timeit</code>  测试函数</li><li><code>memoryprofiler</code>  监控 Python 代码的内存使用</li><li><code>lineprofiler</code>  逐行性能分析</li></ul></li><li>解释器<ul><li><code>Cpython</code></li><li><code>Psyco</code>  JIT解释器</li><li><code>PyPi</code></li><li><code>Cython</code></li><li><code>Jython</code></li><li><code>ccfi</code></li></ul></li><li>C / C++ 扩展<ul><li><code>ctypes</code></li><li><code>SWIG</code></li></ul></li><li>其他<ul><li><code>Numba</code>  GPU加速</li></ul></li></ul><h3 id="Python和C-互相调用"><a href="#Python和C-互相调用" class="headerlink" title="Python和C++互相调用"></a>Python和C++互相调用</h3><ul><li>C++ 和 Python 忙等待文件夹内容</li><li>Python运行 C++停；C++停的时候唤醒Python</li></ul><h3 id="Ctypes-示例"><a href="#Ctypes-示例" class="headerlink" title="Ctypes 示例"></a>Ctypes 示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_int</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">add_float</span><span class="params">(<span class="keyword">float</span>, <span class="keyword">float</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_int</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">add_float</span><span class="params">(<span class="keyword">float</span> num1, <span class="keyword">float</span> num2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来将C文件编译为.so文件(windows下为DLL)。下面操作会生成adder.so文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for Mac</span></span><br><span class="line">$ gcc -shared -Wl,-install_name,adder.so -o adder.so -fPIC add.c</span><br></pre></td></tr></table></figure><p>现在在你的Python代码中来调用它</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># load the shared object file</span></span><br><span class="line">adder = CDLL(<span class="string">'./adder.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># find sum of integers</span></span><br><span class="line">res_int = adder.add_int(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">print(<span class="string">"Sum of 4 and 5 = "</span> + str(res_int))</span><br><span class="line"></span><br><span class="line"><span class="comment"># find sum of floats</span></span><br><span class="line">a = c_float(<span class="number">5.5</span>)</span><br><span class="line">b = c_float(<span class="number">4.1</span>)</span><br><span class="line"></span><br><span class="line">add_float = adder.add_float</span><br><span class="line">add_float.restype = c_float</span><br><span class="line">print(<span class="string">"Sum of 5.5 and 4.1 = "</span>, str(add_float(a, b)))</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  <span class="built_in">test</span>-ctypes python3 test.py </span><br><span class="line">Sum of 4 and 5 = 9</span><br><span class="line">Sum of 5.5 and 4.1 =  9.600000381469727</span><br></pre></td></tr></table></figure><h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><ul><li><a href="https://docs.python.org/3/library/ctypes.html" target="_blank" rel="noopener">ctypes — A foreign function library for Python</a></li><li>The chapter 15 of “Python CookBook” book.</li><li><a href="http://wiki.jikexueyuan.com/project/interpy-zh/c_extensions/ctypes.html" target="_blank" rel="noopener">极客学院</a></li><li><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/chapters/p15_c_extensions.html" target="_blank" rel="noopener">第十五章：C语言扩展 | python3-cookbook</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-性能优化&quot;&gt;&lt;a href=&quot;#Python-性能优化&quot; class=&quot;headerlink&quot; title=&quot;Python 性能优化&quot;&gt;&lt;/a&gt;Python 性能优化&lt;/h1&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Python" scheme="https://www.fuweihu.xyz/categories/Python/"/>
    
    
      <category term="Python" scheme="https://www.fuweihu.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python-Logging</title>
    <link href="https://www.fuweihu.xyz/2019/03/23/Python-Logging/"/>
    <id>https://www.fuweihu.xyz/2019/03/23/Python-Logging/</id>
    <published>2019-03-23T14:22:00.000Z</published>
    <updated>2019-03-23T14:09:54.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-With-Logging"><a href="#Python-With-Logging" class="headerlink" title="Python With Logging"></a>Python With Logging</h1><ul><li>logging有两种使用方法：<ul><li>基础使用</li><li>高级用法</li></ul></li></ul><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><h5 id="logging使用场景"><a href="#logging使用场景" class="headerlink" title="logging使用场景"></a>logging使用场景</h5><ul><li>Python内置的logging模块，为我们提供了现成的高效好用的日志解决方案。但是，不是所有的场景都需要使用logging模块，下面是Python官方推荐的使用方法：</li></ul><table><thead><tr><th style="text-align:center">要执行的任务</th><th style="text-align:center">执行这个任务最好的工具</th></tr></thead><tbody><tr><td style="text-align:center">普通情况下，在控制台显示输出</td><td style="text-align:center"><code>print()</code></td></tr><tr><td style="text-align:center">报告正常程序操作过程中发生的事件</td><td style="text-align:center"><code>logging.info()</code> (or <code>logging.debug()</code>)</td></tr><tr><td style="text-align:center">发出有关特定事件的警告</td><td style="text-align:center"><code>warnings.warn()</code> or <code>logging.warning()</code> 有区别</td></tr><tr><td style="text-align:center">报告错误</td><td style="text-align:center">弹出异常</td></tr><tr><td style="text-align:center">在不引发异常的情况下报告错误</td><td style="text-align:center"><code>logging.error()</code>, <code>logging.exception()</code> or <code>logging.critical()</code></td></tr></tbody></table><ul><li>日志级别，按事件严重程度由低到高排列：</li></ul><table><thead><tr><th style="text-align:center">级别</th><th style="text-align:center">使用范围</th></tr></thead><tbody><tr><td style="text-align:center"><code>DEBUG</code></td><td style="text-align:center">详细信息，常用于调试</td></tr><tr><td style="text-align:center"><code>INFO</code></td><td style="text-align:center">程序正常运行过程中产生的一些信息</td></tr><tr><td style="text-align:center"><code>WARNING</code></td><td style="text-align:center">警告用户，虽然程序还在正常工作，但有可能发生错误</td></tr><tr><td style="text-align:center"><code>ERROR</code></td><td style="text-align:center">由于更严重的问题，程序已不能执行一些功能了</td></tr><tr><td style="text-align:center"><code>CRITICAL</code></td><td style="text-align:center">严重错误，程序已不能继续运行</td></tr></tbody></table><h5 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h5><p>要把日志输出到文件内，就不能使用上面的方法了，但是logging模块同样给我们提供了一个相对便捷的手段，那就是logging.basicConfig()方法。重新进入解释器环境，执行下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(filename=<span class="string">'example.log'</span>,level=logging.DEBUG)</span><br><span class="line">logging.debug(<span class="string">'This message should go to the log file'</span>)</span><br><span class="line">logging.info(<span class="string">'So should this'</span>)</span><br><span class="line">logging.warning(<span class="string">'And this, too'</span>)</span><br></pre></td></tr></table></figure><p>然后打开本地的example.log文件，可以看到下面的日志消息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DEBUG:root:This message should go to the log file</span><br><span class="line">INFO:root:So should this</span><br><span class="line">WARNING:root:And this, too</span><br></pre></td></tr></table></figure><p>可以通过下面的方法来获取用户输入的日志级别参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">numeric_level = getattr(logging, loglevel.upper(), <span class="keyword">None</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> isinstance(numeric_level, int):</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'Invalid log level: %s'</span> % loglevel)</span><br><span class="line">logging.basicConfig(level=numeric_level, ...)</span><br></pre></td></tr></table></figure><p>附加时间信息：要在日志内容中附加时间信息，可以在format字符串中添加%(asctime)s。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(format=<span class="string">'%(asctime)s %(message)s'</span>)</span><br><span class="line">logging.warning(<span class="string">'is when this event was logged.'</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2010-12-12 11:41:42,612 is when this event was logged.</span><br></pre></td></tr></table></figure><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><ul><li>如果只是简单地使用logging，那么使用上面介绍的方法就可以了，如果要深度定制logging，那么就需要对它有更深入的了解。下面的内容才是基本的logging模块的使用方法。logging模块采用了模块化设计，主要包含四种组件：</li></ul><table><thead><tr><th style="text-align:center">组件</th><th style="text-align:center">名称</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">Loggers</td><td style="text-align:center">日志器</td><td style="text-align:center">提供应用程序代码能直接使用的接口</td></tr><tr><td style="text-align:center">Handlers</td><td style="text-align:center">处理器</td><td style="text-align:center">将记录器产生的日志发送至目的地</td></tr><tr><td style="text-align:center">Filters</td><td style="text-align:center">过滤器</td><td style="text-align:center">提供更好的粒度控制，决定哪些日志会被输出</td></tr><tr><td style="text-align:center">Formatters</td><td style="text-align:center">格式器</td><td style="text-align:center">设置日志内容的组成结构和消息字段</td></tr></tbody></table><h5 id="日志流"><a href="#日志流" class="headerlink" title="日志流"></a>日志流</h5><ul><li>日志事件信息在loggers和handlers中的逻辑流程如下图所示：</li></ul><p><img src="/2019/03/23/Python-Logging/logging-flow.png" alt="logging-flow"></p><ul><li>下面是同时向屏幕和文件进行日志输出的流程：</li></ul><p><img src="/2019/03/23/Python-Logging/logging-flow-.png" alt="logging-flow"></p><h5 id="Loggers记录器"><a href="#Loggers记录器" class="headerlink" title="Loggers记录器"></a>Loggers记录器</h5><p>logging模块的日志功能是基于Logger类实现的。我们可以通过下面的方法获取一个Logger类的实例（建议以模块名命名logger实例）。</p><p><code>logger = logging.getLogger(__name__)</code></p><p>Logger是一个树形层级结构，在使用debug()，info()，warn()，error()，critical()等方法之前必须先创建一个Logger的实例，即创建一个记录器，如果没有显式的进行创建，则默认创建一个<code>root logger</code>，并应用默认的日志级别(WARN)，默认的处理器Handler(StreamHandler，即将日志信息打印在标准输出上)，和默认的格式化器Formatter，就像我们在前面举的那些例子一样。</p><p>logger对象有三重功能。首先，提供应用程序调用的接口；其次，决定日志记录的级别；最后，将日志内容传递到相关联的handlers中。</p><p>总结logger对象的用法，可以分成两类：配置和消息发送。</p><p>下面是最常用的配置方法：</p><p><code>Logger.setLevel()</code>：设置日志记录级别</p><p><code>Logger.addHandler()</code>和<code>Logger.removeHandler()</code>：为logger对象添加或删除handler处理器对象。</p><p><code>Logger.addFilter()</code>和<code>Logger.removeFilter()</code>：为为logger对象添加或删除filter过滤器对象。</p><p>配置好logger对象后，就可以使用下面的方法创建日志消息了：</p><p><code>Logger.debug()</code>, <code>Logger.info()</code>, <code>Logger.warning()</code>, <code>Logger.error()</code>, and <code>Logger.critical()</code>：创建对应级别的日志，但不一定会被记录。</p><p><code>Logger.exception()</code>：创建一个类似<code>Logger.error()</code>的日志消息。不同的是<code>Logger.exception()</code>保存有一个追踪栈。该方法只能在异常handler中调用。</p><p><code>Logger.log()</code>：显式的创建一条日志，是前面几种方法的通用方法。</p><p>注意，<code>getLogger()</code>方法返回一个logger对象的引用，并以你提供的name参数命名，如果未提供名字，那么默认为‘root’。使用同样的name参数，多次调用<code>getLogger()</code>，将返回同样的logger对象。</p><h5 id="Handlers处理器"><a href="#Handlers处理器" class="headerlink" title="Handlers处理器"></a>Handlers处理器</h5><p>Handlers对象是日志信息的处理器、分发器。它们将日志分发到不同的目的地。比如有时候我们希望将所有的日志都记录在本地文件内，将error及其以上级别的日志发送到标准输出stdout，将critical级别的日志以邮件的方法发送给管理员。这就需要同时有三个独立的handler，分别负责一个方向的日志处理。</p><p>logging模块使用较多的handlers有两个，<code>StreamHandler</code>和<code>FileHandler</code>。</p><ul><li>StreamHandler</li></ul><p>标准输出stdout（如显示器）分发器。</p><p>创建方法: <code>sh = logging.StreamHandler(stream=None)</code></p><ul><li>FileHandler</li></ul><p>将日志保存到磁盘文件的处理器。</p><p>创建方法: <code>fh = logging.FileHandler(filename, mode=&#39;a&#39;, encoding=None, delay=False)</code></p><p>handlers对象有下面的方法：</p><p><code>setLevel()</code>：和logger对象的一样，设置日志记录级别。那为什么要设置两层日志级别呢？logger对象的日志级别是全局性的，对所有handler都有效，相当于默认等级。而handlers的日志级别只对自己接收到的logger传来的日志有效，进行了更深一层的过滤。</p><p><code>setFormatter()</code>：设置当前handler对象使用的消息格式。</p><p><code>addFilter()</code> 和 <code>removeFilter()</code>：配置或删除一个filter过滤对象</p><p>logging模块内置了下面的handler处理器，从字面上你就能看出它们的大概用途：</p><p>StreamHandler<br>FileHandler<br>BaseRotatingHandler<br>RotatingFileHandler<br>TimedRotatingFileHandler<br>SocketHandler<br>DatagramHandler<br>SMTPHandler<br>SysLogHandler<br>NTEventLogHandler<br>HTTPHandler<br>WatchedFileHandler<br>QueueHandler<br>NullHandler</p><h5 id="Formatters"><a href="#Formatters" class="headerlink" title="Formatters"></a>Formatters</h5><p>Formatter对象用来最终设置日志信息的顺序、结构和内容。其构造方法为：</p><p><code>ft = logging.Formatter.__init__(fmt=None, datefmt=None, style=’%’)</code><br>如果不指定datefmt，那么它默认是<code>%Y-%m-%d %H:%M:%S</code>样式的。</p><p>style参数默认为百分符%，这表示前面的fmt参数应该是一个<code>%(&lt;dictionary key&gt;)s</code>格式的字符串，而可以使用的logging内置的keys，如下表所示：</p><p><img src="/2019/03/23/Python-Logging/formatters.png" alt=""></p><h5 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h5><p>Handlers和Loggers可以使用Filters来完成比日志级别更复杂的过滤。比如我们定义了<code>filter = logging.Filter(&#39;a.b.c&#39;)</code>，并将这个Filter添加到了一个Handler上，则使用该Handler的Logger中只有名字带<code>a.b.c</code>前缀的Logger才能输出其日志。</p><p>创建方法: <code>filter = logging.Filter(name=&#39;&#39;)</code></p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filter = logging.Filter(<span class="string">'mylogger.child1.child2'</span>)  </span><br><span class="line">fh.addFilter(filter)</span><br></pre></td></tr></table></figure><p>则只会输出下面格式的日志，注意其用户名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2017-09-27 16:27:46,227 - mylogger.child1.child2 - DEBUG - logger1 debug message</span><br><span class="line">2017-09-27 16:27:46,227 - mylogger.child1.child2 - DEBUG - logger1 debug message</span><br><span class="line">2017-09-27 16:27:46,227 - mylogger.child1.child2 - DEBUG - logger1 debug message</span><br><span class="line">2017-09-27 16:27:46,227 - mylogger.child1.child2 - DEBUG - logger1 debug message</span><br></pre></td></tr></table></figure><h5 id="配置日志模块"><a href="#配置日志模块" class="headerlink" title="配置日志模块"></a>配置日志模块</h5><ul><li><p>有三种配置logging的方法：</p><ul><li>创建loggers、handlers和formatters，然后使用Python的代码调用上面介绍过的配置函数。</li><li>创建一个logging配置文件，然后使用fileConfig()方法读取它。</li><li>创建一个配置信息字典然后将它传递给dictConfig()方法。</li></ul></li><li><p>下面的例子采用了第一种方法：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#simple_logging_module.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建logger记录器</span></span><br><span class="line">logger = logging.getLogger(<span class="string">'simple_example'</span>)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个控制台处理器，并将日志级别设置为debug。</span></span><br><span class="line">ch = logging.StreamHandler()</span><br><span class="line">ch.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建formatter格式化器</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将formatter添加到ch处理器</span></span><br><span class="line">ch.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将ch添加到logger</span></span><br><span class="line">logger.addHandler(ch)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后就可以开始使用了！</span></span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure><p>在命令行中运行上面的代码，输出结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python simple_logging_module.py</span><br><span class="line">2005-03-19 15:10:26,618 - simple_example - DEBUG - debug message</span><br><span class="line">2005-03-19 15:10:26,620 - simple_example - INFO - info message</span><br><span class="line">2005-03-19 15:10:26,695 - simple_example - WARNING - warn message</span><br><span class="line">2005-03-19 15:10:26,697 - simple_example - ERROR - error message</span><br><span class="line">2005-03-19 15:10:26,773 - simple_example - CRITICAL - critical message</span><br></pre></td></tr></table></figure><ul><li>下面是使用第二种方法，logging配置文件的方式：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># simple_logging_config.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"></span><br><span class="line">logging.config.fileConfig(<span class="string">'logging.conf'</span>) <span class="comment"># 读取config文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建logger记录器</span></span><br><span class="line">logger = logging.getLogger(<span class="string">'simpleExample'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用日志功能</span></span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure><p>其中的logging.conf配置文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[loggers]</span><br><span class="line">keys=root,simpleExample</span><br><span class="line"></span><br><span class="line">[handlers]</span><br><span class="line">keys=consoleHandler</span><br><span class="line"></span><br><span class="line">[formatters]</span><br><span class="line">keys=simpleFormatter</span><br><span class="line"></span><br><span class="line">[logger_root]</span><br><span class="line">level=DEBUG</span><br><span class="line">handlers=consoleHandler</span><br><span class="line"></span><br><span class="line">[logger_simpleExample]</span><br><span class="line">level=DEBUG</span><br><span class="line">handlers=consoleHandler</span><br><span class="line">qualname=simpleExample</span><br><span class="line">propagate=0</span><br><span class="line"></span><br><span class="line">[handler_consoleHandler]</span><br><span class="line">class=StreamHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=simpleFormatter</span><br><span class="line">args=(sys.stdout,)</span><br><span class="line"></span><br><span class="line">[formatter_simpleFormatter]</span><br><span class="line">format=%(asctime)s - %(name)s - %(levelname)s - %(message)s</span><br><span class="line">datefmt=</span><br></pre></td></tr></table></figure><p>在命令行中执行代码，结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python simple_logging_config.py</span><br><span class="line">2005-03-19 15:38:55,977 - simpleExample - DEBUG - debug message</span><br><span class="line">2005-03-19 15:38:55,979 - simpleExample - INFO - info message</span><br><span class="line">2005-03-19 15:38:56,054 - simpleExample - WARNING - warn message</span><br><span class="line">2005-03-19 15:38:56,055 - simpleExample - ERROR - error message</span><br><span class="line">2005-03-19 15:38:56,130 - simpleExample - CRITICAL - critical message</span><br></pre></td></tr></table></figure><p>Python官方更推荐第三种新的配置方法，类字典形式的配置信息，因为Python的字典运用形式多样，操作灵活。比如，你可以通过JSON格式保存字典，或者YAML格式保存信息，然后读取成字典。当然，你也可以直接在Python代码里编写传统的带有配置信息的字典。一切都是基于键值对形式的就OK。</p><p>下面的例子就是基于YAML配置文件的日志。logging.conf.yaml配置文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">version: 1</span><br><span class="line">formatters:</span><br><span class="line">  simple:</span><br><span class="line">    format: &apos;%(asctime)s - %(name)s - %(levelname)s - %(message)s&apos;</span><br><span class="line">handlers:</span><br><span class="line">  console:</span><br><span class="line">    class: logging.StreamHandler</span><br><span class="line">    level: DEBUG</span><br><span class="line">    formatter: simple</span><br><span class="line">    stream: ext://sys.stdout</span><br><span class="line">loggers:</span><br><span class="line">  simpleExample:</span><br><span class="line">    level: DEBUG</span><br><span class="line">    handlers: [console]</span><br><span class="line">    propagate: no</span><br><span class="line">root:</span><br><span class="line">  level: DEBUG</span><br><span class="line">  handlers: [console]</span><br></pre></td></tr></table></figure><p>这里要先通过pip安装yaml模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyyaml</span><br></pre></td></tr></table></figure><p>yaml模块的使用很简单，使用open()方法打开一个yaml文件对象，然后使用yaml的load()方法将文件内容读成一个Python的字典对象。最后我们根据这个字典对象，使用logging.conf的dictConfig()方法，获取配置信息。如下代码所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过yaml文件配置logging</span></span><br><span class="line">f = open(<span class="string">"logging.conf.yaml"</span>)</span><br><span class="line">dic = yaml.load(f)</span><br><span class="line">f.close()</span><br><span class="line">logging.config.dictConfig(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建logger</span></span><br><span class="line">logger = logging.getLogger(<span class="string">'simpleExample'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出日志</span></span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2017-09-27 17:41:09,241 - simpleExample - DEBUG - debug message</span><br><span class="line">2017-09-27 17:41:09,242 - simpleExample - INFO - info message</span><br><span class="line">2017-09-27 17:41:09,242 - simpleExample - WARNING - warn message</span><br><span class="line">2017-09-27 17:41:09,242 - simpleExample - ERROR - error message</span><br><span class="line">2017-09-27 17:41:09,242 - simpleExample - CRITICAL - critical message</span><br></pre></td></tr></table></figure><h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><ul><li><a href="https://docs.python.org/3/library/logging.html#module-level-functions" target="_blank" rel="noopener">The official documentation</a></li><li><a href="http://www.liujiangblog.com/course/python/71" target="_blank" rel="noopener">刘江的博客及教程 | logging</a></li><li><a href="https://cloud.tencent.com/developer/section/1369390" target="_blank" rel="noopener">logging | tencent</a></li><li><a href="https://docs.python.org/3/howto/logging.html#logging-advanced-tutorial" target="_blank" rel="noopener">Logging HOWTO</a></li><li><a href="https://docs.python.org/3/howto/logging-cookbook.html#logging-cookbook" target="_blank" rel="noopener">Logging Cookbook</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-With-Logging&quot;&gt;&lt;a href=&quot;#Python-With-Logging&quot; class=&quot;headerlink&quot; title=&quot;Python With Logging&quot;&gt;&lt;/a&gt;Python With Logging&lt;/h1&gt;&lt;ul&gt;

      
    
    </summary>
    
      <category term="Python" scheme="https://www.fuweihu.xyz/categories/Python/"/>
    
    
      <category term="Logging" scheme="https://www.fuweihu.xyz/tags/Logging/"/>
    
  </entry>
  
  <entry>
    <title>单调栈</title>
    <link href="https://www.fuweihu.xyz/2019/02/12/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    <id>https://www.fuweihu.xyz/2019/02/12/单调栈/</id>
    <published>2019-02-11T16:52:00.000Z</published>
    <updated>2019-05-25T14:54:33.932Z</updated>
    
    <content type="html"><![CDATA[<p><strong>单调栈</strong>：栈中从栈底到栈顶的数都是递增（减）的，为了维护这种结构在插入比当前栈顶大的数的时候都需要先将栈顶的数弹出，这样我们就能够知道弹出的这个数两边比它大的数了</p><p>下面使用Leetcode两道题举例：</p><h3 id="84-Largest-Rectangle-in-Histogram"><a href="#84-Largest-Rectangle-in-Histogram" class="headerlink" title="84. Largest Rectangle in Histogram"></a><a href="https://leetcode.com/problems/largest-rectangle-in-histogram/description/" target="_blank" rel="noopener">84. Largest Rectangle in Histogram</a></h3><h5 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h5><p>给定n个非负整数代表柱状图的条高，其中每个条的宽度为1，求柱状图中最大矩形的面积。<br><img src="/2019/02/12/单调栈/84-1.png" alt=""><br>上面是一个柱状图，其中每个条形的宽度为1，给定高度=[2,1,5,6,2,3]。<br><img src="/2019/02/12/单调栈/84-2.png" alt=""><br>最大的矩形显示在阴影区域，其面积为10个单位。<br>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,1,5,6,2,3]</span><br><span class="line">Output: 10</span><br></pre></td></tr></table></figure></p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><ul><li>如果height是升序的，例如：[1，2，3]，那么就是比较（1 <em> 3）vs（2 </em> 2）vs（3 <em> 1），也就是max（height[i] </em> (len(height) - 1)）</li><li>我们要找到最大的长方形面积，可以按照这种方式来找：对于数组中每个元素代表的高度，找到以当前这个高度为高的最大的长方形面积，那么遍历所有的高度即可。我们直接暴力求解的话，就是O(n^2)的复杂度。</li><li>有了上述思路后，我们在遍历数组的时候维护一个栈,这个栈中的元素从底向上按照高度值递增。如果遇到当前bar的高度比栈顶元素低，那么就出栈直到栈顶元素低于当前bar的高度。关键就在这里，当我们将第i个元素弹出栈的时候，我们就可以计算以heights[i]为高的最大长方形的面积。在遍历完数组之后，栈内元素仍然需要继续弹出，最后所有元素都会依次出栈,意味着计算完了所有可能的最大面积,就可以得到结果了。</li><li>再来分析一下这个算法的可行性：每一个元素都要入栈一次，出栈一次。入栈的时候的是遍历访问到它的时候，那出栈的时候意味着什么呢。在这里元素出栈意味着，我们已经计算了以它的高度为高的最大长方形面积。结合栈内元素的单调性，栈顶元素所对应的bar一定比出栈元素对应的bar小，所以以出栈元素对应的bar为高的长方形无法往左边延展。结合代码，我们已经判断过当前处理的第i个元素所对应的bar也比出栈元素对应的bar小，所以长方形无法往右边延展。这个元素和左右边界之间如果还有空隙，那么这些空隙里所存在的bar，一定是因为维护栈的单调性而被弹出了。也就是说，如果这些bar存在，那么一定比这个出栈元素所对应的bar高。既然这些bar的高度更高，那么就可以被纳入这个最大长方形面积的计算中，也就不影响当前出栈元素的最大长方形面积的计算。以上我们就证明了，当我们将第i个元素弹出栈的时候，我们计算了以heights[i]为高的最大长方形的面积。</li><li>模拟一下过程：<ul><li>先加入一个0，方便最后可以全部弹栈出来。栈变成：[2，1，5，6，3，-1]</li><li>2进栈，1比栈顶小，对2进行出栈，max_space = 2</li><li>2被替换为1进栈，1继续进栈，这时栈为[1，1]</li><li>5，6都是非降的，继续进栈，栈为[1，1，5，6]</li><li>遇到3，是一个降序点；开始出栈，6出栈，对应space=61；5出栈对应space=52；下一个1比3小，不需要出栈。然后将5、6的弹栈后的空位压栈为3，这是栈为[1，1，3，3，3]</li><li>下一步遇到0，开始依次出栈，得到area=31，32，33，14，1*5。</li><li>遍历结束。整个过程中max_space=10</li></ul></li></ul><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Runtime: 60 ms, faster than 97.59% of Python3 online submissions for Largest Rectangle in Histogram.</span></span><br><span class="line"><span class="comment"># Memory Usage: 9.3 MB, less than 41.22% of Python3 online submissions for Largest Rectangle in Histogram.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestRectangleArea</span><span class="params">(self, height)</span>:</span></span><br><span class="line">        height.append(<span class="number">0</span>)</span><br><span class="line">        stack = [<span class="number">-1</span>]  <span class="comment"># 添加-1是为了判断是不是进行到了最后一个</span></span><br><span class="line">        max_space = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(height)):</span><br><span class="line">            <span class="keyword">while</span> height[i] &lt; height[stack[<span class="number">-1</span>]]:  <span class="comment"># 如果当前柱比栈顶柱要低，出栈，更新结果</span></span><br><span class="line">                h = height[stack.pop()]</span><br><span class="line">                w = i - stack[<span class="number">-1</span>] - <span class="number">1</span></span><br><span class="line">                max_space = max(max_space, h * w)</span><br><span class="line">            stack.append(i)</span><br><span class="line">        <span class="keyword">return</span> max_space</span><br></pre></td></tr></table></figure><ul><li>说明：<ul><li>height升序则入栈，否则出栈计算并更新结果</li><li>stack存储的是height的下标</li><li>栈变化如下：</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[-1]</span><br><span class="line">[-1, 0]</span><br><span class="line">[-1, 1]</span><br><span class="line">[-1, 1, 2]</span><br><span class="line">[-1, 1, 2, 3]</span><br><span class="line">[-1, 1, 4]</span><br><span class="line">[-1, 1, 4, 5]</span><br></pre></td></tr></table></figure><h3 id="85-Maximal-Rectangle"><a href="#85-Maximal-Rectangle" class="headerlink" title="85. Maximal Rectangle"></a><a href="https://leetcode.com/problems/maximal-rectangle/description/" target="_blank" rel="noopener">85. Maximal Rectangle</a></h3><h5 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h5><p>给定一个填充了0和1的二维二进制矩阵，找到只包含1的最大矩形并返回其面积。<br>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]</span><br><span class="line">]</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure></p><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><ul><li>对于某一行，将它转换成以当前行为底的直方图，而且下一个行可以根据上一行的结果直接求得高度，所以遍历完成以后，就能得到最大的矩形。</li><li>进行一下模拟:<ul><li>第一行，对应的高度为 1 0 1 0 0</li><li>第二行，对应的高度为 2 0 2 1 1</li><li>第三行，对应的高度为 3 1 3 2 2</li><li>第四行，对应的高度为 4 0 0 3 0</li></ul></li><li>其实就是，对于每一行，如果它为1，就加上上一行的高度，否则高度就为0，求得高度以后，用上一个问题的解法直接求得面积并且更新结果就可以了。</li></ul><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Runtime: 80 ms, faster than 96.81% of Python3 online submissions for Maximal Rectangle.</span></span><br><span class="line"><span class="comment"># Memory Usage: 7.6 MB, less than 52.71% of Python3 online submissions for Maximal Rectangle.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximalRectangle</span><span class="params">(self, matrix)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        height = [<span class="number">0</span>] * (len(matrix[<span class="number">0</span>]) + <span class="number">1</span>)</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(matrix[<span class="number">0</span>])):</span><br><span class="line">                height[i] = height[i] + <span class="number">1</span> <span class="keyword">if</span> row[i] == <span class="string">'1'</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            stack = [<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(matrix[<span class="number">0</span>]) + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">while</span> height[i] &lt; height[stack[<span class="number">-1</span>]]:</span><br><span class="line">                    h = height[stack.pop()]</span><br><span class="line">                    w = i - <span class="number">1</span> - stack[<span class="number">-1</span>]</span><br><span class="line">                    ans = max(ans, h * w)</span><br><span class="line">                stack.append(i)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;单调栈&lt;/strong&gt;：栈中从栈底到栈顶的数都是递增（减）的，为了维护这种结构在插入比当前栈顶大的数的时候都需要先将栈顶的数弹出，这样我们就能够知道弹出的这个数两边比它大的数了&lt;/p&gt;
&lt;p&gt;下面使用Leetcode两道题举例：&lt;/p&gt;
&lt;h3 id=&quot;8
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.fuweihu.xyz/categories/Algorithm/"/>
    
    
      <category term="Stack" scheme="https://www.fuweihu.xyz/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>主要排序算法</title>
    <link href="https://www.fuweihu.xyz/2019/02/06/Sort-Interview/"/>
    <id>https://www.fuweihu.xyz/2019/02/06/Sort-Interview/</id>
    <published>2019-02-06T15:13:00.000Z</published>
    <updated>2019-05-25T14:54:13.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><table><thead><tr><th style="text-align:center">算法</th><th style="text-align:center">稳定性</th><th style="text-align:center">平均时间复杂度</th><th style="text-align:center">最优时间复杂度</th><th style="text-align:center">最坏时间复杂度</th><th style="text-align:center">空间复杂度</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">快速排序</td><td style="text-align:center">x</td><td style="text-align:center">NlogN</td><td style="text-align:center">NlogN</td><td style="text-align:center">N^2</td><td style="text-align:center">logN</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">归并排序</td><td style="text-align:center">√</td><td style="text-align:center">NlogN</td><td style="text-align:center">NlogN</td><td style="text-align:center">NlogN</td><td style="text-align:center">N</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">堆排序</td><td style="text-align:center">x</td><td style="text-align:center">NlogN</td><td style="text-align:center">NlogN</td><td style="text-align:center">NlogN</td><td style="text-align:center">1</td><td style="text-align:center">无法利用局部性原理</td></tr></tbody></table><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><img src="/2019/02/06/Sort-Interview/quick-sort.gif" alt=""></p><ul><li>快速排序使用分治法策略来把一个序列分为两个子序列</li><li>步骤：<ol><li>从数列中挑出一个元素，称为“基准”</li><li>重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分割结束之后，该基准就处于数列的中间位置。这个称为分割操作。</li><li>递归地把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort_recursion</span><span class="params">(array, left, right)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> left &gt;= right: <span class="keyword">return</span>  <span class="comment"># 递归停止</span></span><br><span class="line">        i, j = left, right</span><br><span class="line">        flag = array[left]  <span class="comment"># 取首位为对比标志值</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j:  <span class="comment"># 找flag的最终位置</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> array[j] &gt;= flag:  <span class="comment"># 用j向左扫描找小于flag的记录</span></span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; j:</span><br><span class="line">                array[i] = array[j]  <span class="comment"># 小记录移到左边</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> array[i] &lt;= flag:  <span class="comment"># 用i向右扫描找大于flag的记录</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; j:</span><br><span class="line">                array[j] = array[i]  <span class="comment"># 大记录移到右边</span></span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">        array[i] = flag  <span class="comment"># 将对比的标志位存入其最终位置</span></span><br><span class="line">        sort_recursion(array, left, i - <span class="number">1</span>)  <span class="comment"># 左边</span></span><br><span class="line">        sort_recursion(array, i + <span class="number">1</span>, right)  <span class="comment"># 右边</span></span><br><span class="line"></span><br><span class="line">    sort_recursion(array, <span class="number">0</span>, len(array) - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p><img src="/2019/02/06/Sort-Interview/merge-sort.gif" alt=""></p><ul><li>指的是将两个已经排序的序列合并成一个序列的操作</li><li>递归法（自顶向下）：<ol><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li><li>重复步骤3直到某一指针到达序列尾</li><li>将另一序列剩下的所有元素直接复制到合并序列尾</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span>  <span class="comment"># 归并</span></span><br><span class="line">        tmp = []</span><br><span class="line">        i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(left) <span class="keyword">and</span> j &lt; len(right):</span><br><span class="line">            <span class="keyword">if</span> left[i] &lt;= right[j]:</span><br><span class="line">                tmp.append(left[i])</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp.append(right[j])</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        tmp += left[i:]</span><br><span class="line">        tmp += right[j:]</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line">    length = len(array)</span><br><span class="line">    <span class="keyword">if</span> length &lt; <span class="number">2</span>:  <span class="comment"># 递归中止</span></span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mid = length // <span class="number">2</span></span><br><span class="line">        left, right = merge_sort(array[:mid]), merge_sort(array[mid:])  <span class="comment"># 递归</span></span><br><span class="line">        <span class="keyword">return</span> merge(left, right)  <span class="comment"># 归并</span></span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p><img src="/2019/02/06/Sort-Interview/heap-sort.gif" alt=""></p><ul><li>指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子节点的键值或索引总是小于（或者大于）它的父节点。</li><li>在堆的数据结构中，堆中的最大值总是位于根节点（在优先队列中使用堆的话堆中的最小值位于根节点）。堆中定义以下几种操作：<ul><li>最大堆调整：将堆的末端子节点作调整，使得子节点永远小于父节点</li><li>创建最大堆：将堆中的所有数据重新排序</li><li>堆排序：移除位在第一个数据的根节点，并做最大堆调整的递归运算</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sift_down</span><span class="params">(start, end)</span>:</span></span><br><span class="line">        root = start</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            child = <span class="number">2</span> * root + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> child &gt; end: <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> child + <span class="number">1</span> &lt;= end <span class="keyword">and</span> array[child] &lt; array[child + <span class="number">1</span>]:  <span class="comment"># 找出两个child中较大的那个</span></span><br><span class="line">                child += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> array[root] &lt; array[child]:  <span class="comment"># 最大堆小于较大的child，交换</span></span><br><span class="line">                array[root], array[child] = array[child], array[root]</span><br><span class="line">                root = child  <span class="comment"># 正在调整的节点设置为root</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span>  <span class="comment"># 无序调整的时候退出</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建最大堆</span></span><br><span class="line">    <span class="keyword">for</span> start <span class="keyword">in</span> range(len(array) // <span class="number">2</span> - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        sift_down(start, len(array) - <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 堆排序</span></span><br><span class="line">    <span class="keyword">for</span> end <span class="keyword">in</span> range(len(array) - <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        array[<span class="number">0</span>], array[end] = array[end], array[<span class="number">0</span>]</span><br><span class="line">        sift_down(<span class="number">0</span>, end - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> array</span><br></pre></td></tr></table></figure><p><img src="/2019/02/06/Sort-Interview/heap-and-array-parent-children.png" alt=""></p><h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><ul><li><a href="https://www.yiibai.com/data_structures_algorithms" target="_blank" rel="noopener">数据结构和算法教程 | 易百教程</a></li><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/docs/notes/%E7%AE%97%E6%B3%95.md#%E5%B0%8F%E7%BB%93" target="_blank" rel="noopener">CS-Notes | CyC2018</a></li><li>《算法》- 红宝书</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对比&quot;&gt;&lt;a href=&quot;#对比&quot; class=&quot;headerlink&quot; title=&quot;对比&quot;&gt;&lt;/a&gt;对比&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;算法&lt;/th&gt;
&lt;th style=&quot;tex
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.fuweihu.xyz/categories/Algorithm/"/>
    
    
      <category term="Sort" scheme="https://www.fuweihu.xyz/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>Backtrack</title>
    <link href="https://www.fuweihu.xyz/2019/02/04/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    <id>https://www.fuweihu.xyz/2019/02/04/回溯算法/</id>
    <published>2019-02-03T16:52:00.000Z</published>
    <updated>2019-05-25T14:54:39.037Z</updated>
    
    <content type="html"><![CDATA[<ul><li>是暴力搜索法中的一种</li><li>回溯法采用试错的思想，它尝试分步的去解决一个问题。在分步解决问题的过程中，当它通过尝试发现现有的分步答案不能得到有效的正确的解答的时候，它将取消上一步甚至是上几步的计算，再通过其它的可能的分步解答再次尝试寻找问题的答案。回溯法通常用最简单的递归方法来实现，在反复重复上述的步骤后可能出现两种情况：<ul><li>找到一个可能存在的正确的答案</li><li>在尝试了所有可能的分步方法后宣告该问题没有答案</li></ul></li></ul><h3 id="经典例题"><a href="#经典例题" class="headerlink" title="经典例题"></a>经典例题</h3><h5 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h5><ul><li>很多人都知道 8皇后问题，即在8X8格的国际象棋上摆放八个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上。一种可能的放置方法法如下：</li></ul><p><img src="/2019/02/04/回溯算法/Backtracking.png" alt=""></p><ul><li><p>解题步骤：</p><ul><li>在第n行寻找可以插入的位置，中间涉及到位置合法性的判断</li><li>如果没有可以插入的位置，返回</li><li>如果有可以插入的位置， 插入数据。此时再判断是否已经是最后一行，如果是，打印输出返回；反之继续对下一行数据进行试探处理。</li></ul></li><li><p>Python代码：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eight_queen_question</span><span class="params">(arr=[None] * <span class="number">8</span>, n=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == len(arr):</span><br><span class="line">        print(arr)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        arr[n], flag = col, <span class="keyword">True</span>  <span class="comment"># 表示把第n行的皇后放在col列上</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> arr[row] == col <span class="keyword">or</span> abs(col - arr[row]) == n - row:  <span class="comment"># 判断是否跟前面的皇后冲突</span></span><br><span class="line">                flag = <span class="keyword">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            eight_queen_question(arr, n+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h5 id="46-Permutations"><a href="#46-Permutations" class="headerlink" title="46. Permutations"></a><a href="https://leetcode.com/problems/permutations/" target="_blank" rel="noopener">46. Permutations</a></h5><ul><li>给定一个不同整数的集合，返回所有可能的排列。举例：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [2,3,1],</span><br><span class="line">  [3,1,2],</span><br><span class="line">  [3,2,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回溯</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permute</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        tmp = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(nums, tmp, arr)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> len(arr) == len(nums): tmp.append(arr)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">                    <span class="keyword">if</span> nums[i] <span class="keyword">not</span> <span class="keyword">in</span> arr: backtrack(nums, tmp, arr + [nums[i]])</span><br><span class="line"></span><br><span class="line">        backtrack(nums, tmp, [])</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br></pre></td></tr></table></figure><h5 id="47-Permutations-II"><a href="#47-Permutations-II" class="headerlink" title="47. Permutations II"></a><a href="https://leetcode.com/problems/permutations-ii/" target="_blank" rel="noopener">47. Permutations II</a></h5><p>给定一组可能包含重复项的数字，返回所有可能的唯一排列。举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,1,2]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,1,2],</span><br><span class="line">  [1,2,1],</span><br><span class="line">  [2,1,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回溯</span></span><br><span class="line"><span class="comment"># time:276 ms  space:6.7 MB</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permuteUnique</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(nums, cur, res)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> nums: res.add(cur)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">                    dfs(nums[:i] + nums[i + <span class="number">1</span>:], cur + (nums[i], ), res)</span><br><span class="line"></span><br><span class="line">        res = set()</span><br><span class="line">        dfs(nums, (), res)</span><br><span class="line">        <span class="keyword">return</span> list(res)</span><br></pre></td></tr></table></figure><h5 id="51-N-Queens"><a href="#51-N-Queens" class="headerlink" title="51. N-Queens"></a><a href="https://leetcode.com/problems/n-queens/submissions/" target="_blank" rel="noopener">51. N-Queens</a></h5><ul><li>N皇后之谜是把N皇后放在一个N×N棋盘上，这样就不会有两个皇后互相攻击。给定一个整数n，将所有不同的解返回到n-queens难题。每一种解决办法都有一个单单的单子配置，而在哪里都有的。举例：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Input: 4</span><br><span class="line">Output: [</span><br><span class="line"> [&quot;.Q..&quot;,  // Solution 1</span><br><span class="line">  &quot;...Q&quot;,</span><br><span class="line">  &quot;Q...&quot;,</span><br><span class="line">  &quot;..Q.&quot;],</span><br><span class="line"></span><br><span class="line"> [&quot;..Q.&quot;,  // Solution 2</span><br><span class="line">  &quot;Q...&quot;,</span><br><span class="line">  &quot;...Q&quot;,</span><br><span class="line">  &quot;.Q..&quot;]</span><br><span class="line">]</span><br><span class="line">解释：有两个不同的解决方案，4皇后难题，如上图所示。</span><br></pre></td></tr></table></figure><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solveNQueens</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[str]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.result = []</span><br><span class="line">        self.col = set()</span><br><span class="line">        self.left = set()</span><br><span class="line">        self.right = set()</span><br><span class="line">        self.dfs(n, <span class="number">0</span>, [])</span><br><span class="line">        <span class="keyword">return</span> self.result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, n, row, curstate)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> row &gt;= n: <span class="keyword">return</span> self.result.append(curstate)</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> col <span class="keyword">in</span> self.col <span class="keyword">or</span> ((row + col) <span class="keyword">in</span> self.left) <span class="keyword">or</span> ((row - col) <span class="keyword">in</span> self.right):  <span class="comment"># 砍树枝</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self.col.add(col)</span><br><span class="line">            self.left.add(col + row)</span><br><span class="line">            self.right.add(row - col)</span><br><span class="line">            self.dfs(n, row + <span class="number">1</span>, curstate + [<span class="string">'.'</span>*col+<span class="string">'Q'</span>+<span class="string">'.'</span>*(n-col<span class="number">-1</span>)])  <span class="comment"># 逐行绘制</span></span><br><span class="line">            self.col.remove(col)</span><br><span class="line">            self.left.remove(col + row)</span><br><span class="line">            self.right.remove(row - col)</span><br></pre></td></tr></table></figure><h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><ul><li><a href="https://github.com/xuelangZF/LeetCode/tree/master/Backtracking" target="_blank" rel="noopener">Backtracking</a></li><li><a href="https://github.com/zhsj/nqueen/blob/master/N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98.md" target="_blank" rel="noopener">N皇后问题</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;是暴力搜索法中的一种&lt;/li&gt;
&lt;li&gt;回溯法采用试错的思想，它尝试分步的去解决一个问题。在分步解决问题的过程中，当它通过尝试发现现有的分步答案不能得到有效的正确的解答的时候，它将取消上一步甚至是上几步的计算，再通过其它的可能的分步解答再次尝试寻找问题的答案。回
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.fuweihu.xyz/categories/Algorithm/"/>
    
    
      <category term="Backtrack" scheme="https://www.fuweihu.xyz/tags/Backtrack/"/>
    
  </entry>
  
  <entry>
    <title>Socket-网络套接字</title>
    <link href="https://www.fuweihu.xyz/2019/02/02/Socket-Python3/"/>
    <id>https://www.fuweihu.xyz/2019/02/02/Socket-Python3/</id>
    <published>2019-02-02T01:58:00.000Z</published>
    <updated>2019-02-02T01:48:25.329Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Socket</strong>又称”套接字”，应用程序通常通过”套接字”向网络发出请求或者应答网络请求，使主机间或者一台计算机上的进程间可以通讯。</p><p>Python 提供了两个基本的 socket 模块：</p><ul><li><code>Socket</code> 它提供了标准的BSD Socket API。</li><li><code>SocketServer</code> 它提供了服务器重心，可以简化网络服务器的开发。</li></ul><h3 id="Socket-类型"><a href="#Socket-类型" class="headerlink" title="Socket 类型"></a>Socket 类型</h3><table><thead><tr><th style="text-align:left">socket 类型</th><th style="text-align:left">描述 </th></tr></thead><tbody><tr><td style="text-align:left">socket.AF_UNIX</td><td style="text-align:left">用于同一台机器上的进程通信（既本机通信）</td></tr><tr><td style="text-align:left">socket.AF_INET</td><td style="text-align:left">用于服务器与服务器之间的网络通信</td></tr><tr><td style="text-align:left">socket.AF_INET6</td><td style="text-align:left">基于IPV6方式的服务器与服务器之间的网络通信</td></tr><tr><td style="text-align:left">socket.SOCK_STREAM</td><td style="text-align:left">基于TCP的流式socket通信</td></tr><tr><td style="text-align:left">socket.SOCK_DGRAM</td><td style="text-align:left">基于UDP的数据报式socket通信</td></tr><tr><td style="text-align:left">socket.SOCK_RAW</td><td style="text-align:left">原始套接字，普通的套接字无法处理ICMP、IGMP等网络报文，而SOCK_RAW可以；其次SOCK_RAW也可以处理特殊的IPV4报文；此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造IP头</td></tr><tr><td style="text-align:left">socket.SOCK_SEQPACKET</td><td style="text-align:left">可靠的连续数据包服务</td></tr></tbody></table><p>创建TCP Socket：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure></p><p>创建UDP Socket：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br></pre></td></tr></table></figure></p><h3 id="Socket-函数"><a href="#Socket-函数" class="headerlink" title="Socket 函数"></a>Socket 函数</h3><ul><li>TCP发送数据时，已建立好TCP链接，所以不需要指定地址，而UDP是面向无连接的，每次发送都需要指定发送给谁。</li><li>服务器与客户端不能直接发送列表，元素，字典等带有数据类型的格式，发送的内容必须是字符串数据。</li></ul><p><strong>服务器端 Socket 函数</strong></p><table><thead><tr><th style="text-align:left">Socket 函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">s.bind(address)</td><td style="text-align:left">将套接字绑定到地址，在AF_INET下，以tuple(host, port)的方式传入，如s.bind((host, port))</td></tr><tr><td style="text-align:left">s.listen(backlog)</td><td style="text-align:left">开始监听TCP传入连接，backlog指定在拒绝链接前，操作系统可以挂起的最大连接数，该值最少为1，大部分应用程序设为5就够用了</td></tr><tr><td style="text-align:left">s.accept()</td><td style="text-align:left">接受TCP链接并返回（conn, address），其中conn是新的套接字对象，可以用来接收和发送数据，address是链接客户端的地址。</td></tr></tbody></table><p><strong>客户端 Socket 函数</strong></p><table><thead><tr><th style="text-align:left">Socket 函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">s.connect(address)</td><td style="text-align:left">链接到address处的套接字，一般address的格式为tuple(host, port)，如果链接出错，则返回socket.error错误</td></tr><tr><td style="text-align:left">s.connect_ex(address)</td><td style="text-align:left">功能与s.connect(address)相同，但成功返回0，失败返回errno的值</td></tr></tbody></table><p><strong>公共 Socket 函数</strong></p><table><thead><tr><th style="text-align:left">Socket 函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">s.recv(bufsize[, flag])</td><td style="text-align:left">接受TCP套接字的数据，数据以字符串形式返回，buffsize指定要接受的最大数据量，flag提供有关消息的其他信息，通常可以忽略</td></tr><tr><td style="text-align:left">s.send(string[, flag])</td><td style="text-align:left">发送TCP数据，将字符串中的数据发送到链接的套接字，返回值是要发送的字节数量，该数量可能小于string的字节大小</td></tr><tr><td style="text-align:left">s.sendall(string[, flag])</td><td style="text-align:left">完整发送TCP数据，将字符串中的数据发送到链接的套接字，但在返回之前尝试发送所有数据。成功返回None，失败则抛出异常</td></tr><tr><td style="text-align:left">s.recvfrom(bufsize[, flag])</td><td style="text-align:left">接受UDP套接字的数据u，与recv()类似，但返回值是tuple(data, address)。其中data是包含接受数据的字符串，address是发送数据的套接字地址</td></tr><tr><td style="text-align:left">s.sendto(string[, flag], address)</td><td style="text-align:left">发送UDP数据，将数据发送到套接字，address形式为tuple(ipaddr, port)，指定远程地址发送，返回值是发送的字节数</td></tr><tr><td style="text-align:left">s.close()</td><td style="text-align:left">关闭套接字</td></tr><tr><td style="text-align:left">s.getpeername()</td><td style="text-align:left">返回套接字的远程地址，返回值通常是一个tuple(ipaddr, port)</td></tr><tr><td style="text-align:left">s.getsockname()</td><td style="text-align:left">返回套接字自己的地址，返回值通常是一个tuple(ipaddr, port)</td></tr><tr><td style="text-align:left">s.setsockopt(level, optname, value)</td><td style="text-align:left">设置给定套接字选项的值</td></tr><tr><td style="text-align:left">s.getsockopt(level, optname[, buflen])</td><td style="text-align:left">返回套接字选项的值</td></tr><tr><td style="text-align:left">s.settimeout(timeout)</td><td style="text-align:left">设置套接字操作的超时时间，timeout是一个浮点数，单位是秒，值为None则表示永远不会超时。一般超时期应在刚创建套接字时设置，因为他们可能用于连接的操作，如s.connect()</td></tr><tr><td style="text-align:left">s.gettimeout()</td><td style="text-align:left">返回当前超时值，单位是秒，如果没有设置超时则返回None</td></tr><tr><td style="text-align:left">s.fileno()</td><td style="text-align:left">返回套接字的文件描述</td></tr><tr><td style="text-align:left">s.setblocking(flag)</td><td style="text-align:left">如果flag为0，则将套接字设置为非阻塞模式，否则将套接字设置为阻塞模式（默认值）。非阻塞模式下，如果调用recv()没有发现任何数据，或send()调用无法立即发送数据，那么将引起socket.error异常。</td></tr><tr><td style="text-align:left">s.makefile()</td><td style="text-align:left">创建一个与该套接字相关的文件</td></tr></tbody></table><h3 id="Socket-编程思想"><a href="#Socket-编程思想" class="headerlink" title="Socket 编程思想"></a>Socket 编程思想</h3><p><strong>TCP 服务器</strong><br>1、创建套接字，绑定套接字到本地IP与端口<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.bind()</span><br></pre></td></tr></table></figure></p><p>2、开始监听链接<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.listen()</span><br></pre></td></tr></table></figure></p><p>3、进入循环，不断接受客户端的链接请求<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">While <span class="keyword">True</span>:</span><br><span class="line">    s.accept()</span><br></pre></td></tr></table></figure></p><p>4、接收客户端传来的数据，并且发送给对方发送数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.recv()</span><br><span class="line">s.sendall()</span><br></pre></td></tr></table></figure></p><p>5、传输完毕后，关闭套接字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.close()</span><br></pre></td></tr></table></figure></p><p><strong>TCP 客户端</strong><br>1、创建套接字并链接至远端地址<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect()</span><br></pre></td></tr></table></figure></p><p>2、链接后发送数据和接收数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.sendall()</span><br><span class="line">s.recv()</span><br></pre></td></tr></table></figure></p><p>3、传输完毕后，关闭套接字</p><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">file-name:server.py</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载socket包</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># 创建 socket 对象</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 获取本地主机名</span></span><br><span class="line">host = socket.gethostname()</span><br><span class="line"><span class="comment"># 设置端口号</span></span><br><span class="line">port = <span class="number">8000</span></span><br><span class="line"><span class="comment"># 绑定端口号</span></span><br><span class="line">s.bind((host, port))</span><br><span class="line"><span class="comment"># 设置最大连接数，超过后排队</span></span><br><span class="line">s.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="comment"># 建立客户端连接</span></span><br><span class="line">    clientsocket, addr = s.accept()</span><br><span class="line">    print(<span class="string">"连接地址: %s"</span> % str(addr))</span><br><span class="line">    msg=<span class="string">'欢迎访问socket服务！'</span>+ <span class="string">"\r\n"</span></span><br><span class="line">    clientsocket.send(msg.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    clientsocket.close()</span><br></pre></td></tr></table></figure><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">file-name:client.py</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载socket包</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># 创建 socket 对象</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 获取本地主机名</span></span><br><span class="line">host = socket.gethostname()</span><br><span class="line"><span class="comment"># 设置端口号</span></span><br><span class="line">port = <span class="number">8000</span></span><br><span class="line"><span class="comment"># 连接服务，指定主机和端口</span></span><br><span class="line">s.connect((host, port))</span><br><span class="line"><span class="comment"># 接收小于 1024 字节的数据</span></span><br><span class="line">msg = s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="comment"># 关系socket连接</span></span><br><span class="line">s.close()</span><br><span class="line"><span class="comment"># 输出访问内容</span></span><br><span class="line">print(msg.decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shell 1</span></span><br><span class="line">&gt; python server.py</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shell 2</span></span><br><span class="line">&gt; python client.py</span><br><span class="line">欢迎访问socket服务！</span><br></pre></td></tr></table></figure><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><iframe src="http://player.bilibili.com/player.html?aid=42382002&cid=74379188&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p><code>如果视频不能播放，请移步</code><a href="https://www.bilibili.com/video/av42382002/" target="_blank" rel="noopener">链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Socket&lt;/strong&gt;又称”套接字”，应用程序通常通过”套接字”向网络发出请求或者应答网络请求，使主机间或者一台计算机上的进程间可以通讯。&lt;/p&gt;
&lt;p&gt;Python 提供了两个基本的 socket 模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;So
      
    
    </summary>
    
      <category term="Network" scheme="https://www.fuweihu.xyz/categories/Network/"/>
    
    
      <category term="Socket" scheme="https://www.fuweihu.xyz/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>MapReduce:面向大型集群的简化数据处理</title>
    <link href="https://www.fuweihu.xyz/2019/02/01/MapReduce/"/>
    <id>https://www.fuweihu.xyz/2019/02/01/MapReduce/</id>
    <published>2019-02-01T14:13:00.000Z</published>
    <updated>2019-05-25T14:36:58.771Z</updated>
    
    <content type="html"><![CDATA[<p><strong>MapReduce: Simplified Data Processing on Large Clusters</strong></p><ul><li>MapReduce既是一种编程模型，也是一种与之关联的、用于处理和产生大数据集的实现。</li><li>用户要特化一个map程序去处理key/value对，并产生中间key/value对的集合，以及一个reduce程序去合并有着相同key的所有中间key/value对。</li></ul><h3 id="编程模型"><a href="#编程模型" class="headerlink" title="编程模型"></a>编程模型</h3><ul><li>MapReduce库的使用者用两个函数来表示这个过程：map和reduce。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 考虑一个问题：统计一个很大的文档集合中每个单词出现的次数。使用者能写出与下面的伪代码相似的代码：</span></span><br><span class="line"><span class="built_in">map</span>(String key,String value):</span><br><span class="line">    <span class="comment">// key: 文档名</span></span><br><span class="line">    <span class="comment">// value: 文档内容</span></span><br><span class="line">    <span class="keyword">for</span> each word w in value:</span><br><span class="line">        EmitIntermediate(w,<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">reduce(Stringkey, Iterator values):</span><br><span class="line">    <span class="comment">// key: 一个单词</span></span><br><span class="line">    <span class="comment">// value: 计数值列表</span></span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> each v in values:</span><br><span class="line">        result += ParseInt(v);</span><br><span class="line">    Emit(AsString(result));</span><br><span class="line"><span class="comment">// map函数将每个单词与出现次数一同输出（本例中简单的输出“1”）。reduce函数将针对某个特定词输出的次数都合并相加。</span></span><br></pre></td></tr></table></figure><ul><li>举例：<ul><li>URL访问频次统计：map函数处理网页请求的日志，对每个URL输出〈URL, 1〉。reduce函数将相同URL的所有值相加并输出〈URL, 总次数〉对。</li></ul></li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p><img src="/2019/02/01/MapReduce/google-paper.png" alt=""></p><p>上图展示了我们的实现中MapReduce操作的整体流程。当用户程序调用MapReduce函数时，会发生下面一系列动作（上图中的标号与下面列表顺序相同）：</p><ol><li>用户程序中的MapReduce库首先将输入文件切分为M块，每块的大小从16MB到64MB（用户可通过一个可选参数控制此大小）。然后MapReduce库会在一个集群的若干台机器上启动程序的多个副本。</li><li>程序的各个副本中有一个是特殊的——主节点，其它的则是工作节点。主节点将M个map任务和R个reduce任务分配给空闲的工作节点，每个节点一项任务。</li><li>被分配map任务的工作节点读取对应的输入区块内容。它从输入数据中解析出key/value对，然后将每个对传递给用户定义的map函数。由map函数产生的中间key/value对都缓存在内存中。</li><li>缓存的数据对会被周期性的由划分函数分成R块，并写入本地磁盘中。这些缓存对在本地磁盘中的位置会被传回给主节点，主节点负责将这些位置再传给reduce工作节点。</li><li>当一个reduce工作节点得到了主节点的这些位置通知后，它使用RPC调用去读map工作节点的本地磁盘中的缓存数据。当reduce工作节点读取完了所有的中间数据，它会将这些数据按中间key排序，这样相同key的数据就被排列在一起了。同一个reduce任务经常会分到有着不同key的数据，因此这个排序很有必要。如果中间数据数量过多，不能全部载入内存，则会使用外部排序。</li><li>reduce工作节点遍历排序好的中间数据，并将遇到的每个中间key和与它关联的一组中间value传递给用户的reduce函数。reduce函数的输出会写到由reduce划分过程划分出来的最终输出文件的末尾。</li><li>当所有的map和reduce任务都完成后，主节点唤醒用户程序。此时，用户程序中的MapReduce调用返回到用户代码中。</li></ol><h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><ul><li>划分函数</li><li>顺序保证</li><li>合并函数</li><li>输入和输出类型</li><li>边界效应</li><li>略过坏记录</li><li>本地执行</li><li>状态信息</li><li>计数器</li></ul><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>约束这个编程模型令并行和分布式计算，以及令这些计算可容错，变得简单了</li><li>网络带宽是一种稀缺资源。我们系统中的很多优化都因此针对减少通过网络发送的数据总量：局部性优化允许我们从本地磁盘读，同时将中间文件写入本地磁盘也节省了网络带宽</li><li>备用执行可以用于减小缓慢的机器的影响，及应对机器失败和数据丢失</li></ul><h3 id="通俗来说"><a href="#通俗来说" class="headerlink" title="通俗来说"></a>通俗来说</h3><ul><li>MapReduce讲的就是分而治之的程序处理理念，把一个复杂的任务划分为若干个简单的任务分别来做。这里重点思想在于<strong>并行计算</strong>。</li><li>举例：统计一篇文章中“的”字的频率，当这篇文章及其长，使用单线程从头到尾计算快还是使用多线程（先将文章分为n段，然后开n个进程，同时计算“的”在各段出现的次数，最后求和）快这里就很明显了吧！</li></ul><h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><ul><li><a href="https://zh.wikipedia.org/wiki/MapReduce" target="_blank" rel="noopener">MapReduce | Wiki</a></li><li>《机器学习实战》 | 第十五章、大数据与MapReduce</li><li><strong>《MapReduce: Simplified Data Processing on Large Clusters》</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;MapReduce: Simplified Data Processing on Large Clusters&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MapReduce既是一种编程模型，也是一种与之关联的、用于处理和产生大数据集的实现。&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="DataMining" scheme="https://www.fuweihu.xyz/categories/DataMining/"/>
    
    
      <category term="MapReduce" scheme="https://www.fuweihu.xyz/tags/MapReduce/"/>
    
  </entry>
  
  <entry>
    <title>Python定时报警</title>
    <link href="https://www.fuweihu.xyz/2019/01/29/Python%E5%AE%9A%E6%97%B6%E6%8A%A5%E8%AD%A6/"/>
    <id>https://www.fuweihu.xyz/2019/01/29/Python定时报警/</id>
    <published>2019-01-29T15:57:00.000Z</published>
    <updated>2019-05-25T14:53:59.949Z</updated>
    
    <content type="html"><![CDATA[<p>当训练ML模型或者运维等等，等候时间长，浪费时间。<br>所以我一般都是下午和晚上改模型和写代码，凌晨和早上跑代码或者训练模型。<br>但是Python毕竟是动态语言，代码中的bug插件未必很完善。<br>为了防止模型在深夜训练到一半的时候出bug，但有不想一直守在电脑前，下面的方法就比较管用了。</p><h3 id="发出报警声音"><a href="#发出报警声音" class="headerlink" title="发出报警声音"></a>发出报警声音</h3><ul><li>Mac下:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    print(<span class="string">"\a"</span>)</span><br></pre></td></tr></table></figure><ul><li>Windows下:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> winsound  <span class="comment"># 这里的lib是python自有的</span></span><br><span class="line">winsound.Beep(<span class="number">2015</span>, <span class="number">3000</span>)</span><br><span class="line"><span class="comment"># winsound.Beep(frequency, duration)  # 参数是频率和持续时间毫秒数</span></span><br></pre></td></tr></table></figure><h3 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a><a href="http://www.runoob.com/python3/python3-smtp.html" target="_blank" rel="noopener">发送邮件</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当训练ML模型或者运维等等，等候时间长，浪费时间。&lt;br&gt;所以我一般都是下午和晚上改模型和写代码，凌晨和早上跑代码或者训练模型。&lt;br&gt;但是Python毕竟是动态语言，代码中的bug插件未必很完善。&lt;br&gt;为了防止模型在深夜训练到一半的时候出bug，但有不想一直守在电脑前，
      
    
    </summary>
    
      <category term="Python" scheme="https://www.fuweihu.xyz/categories/Python/"/>
    
    
      <category term="Code-Skills" scheme="https://www.fuweihu.xyz/tags/Code-Skills/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-数学</title>
    <link href="https://www.fuweihu.xyz/2019/01/27/ML-Math/"/>
    <id>https://www.fuweihu.xyz/2019/01/27/ML-Math/</id>
    <published>2019-01-27T12:13:00.000Z</published>
    <updated>2019-01-27T13:36:35.165Z</updated>
    
    <content type="html"><![CDATA[<embed src="./math.pdf" width="100%" height="1000"><h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><p><a href="http://www.ai-start.com/dl2017/html/math.html" target="_blank" rel="noopener">ai-start | math</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;embed src=&quot;./math.pdf&quot; width=&quot;100%&quot; height=&quot;1000&quot;&gt;

&lt;h3 id=&quot;link&quot;&gt;&lt;a href=&quot;#link&quot; class=&quot;headerlink&quot; title=&quot;link&quot;&gt;&lt;/a&gt;link&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="Math" scheme="https://www.fuweihu.xyz/categories/Math/"/>
    
    
      <category term="Math" scheme="https://www.fuweihu.xyz/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>ML-Match</title>
    <link href="https://www.fuweihu.xyz/2019/01/21/ML-Match/"/>
    <id>https://www.fuweihu.xyz/2019/01/21/ML-Match/</id>
    <published>2019-01-21T07:32:00.000Z</published>
    <updated>2019-05-25T14:39:43.229Z</updated>
    
    <content type="html"><![CDATA[<p><strong>“样本和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已！”</strong></p><h3 id="思路流程"><a href="#思路流程" class="headerlink" title="思路流程"></a>思路流程</h3><ul><li><a href="#1-数据探索">1-数据探索</a><ul><li><a href="#1-1-可视化">1-1-可视化</a></li></ul></li><li><a href="#2-数据预处理">2-数据预处理</a><ul><li><a href="#2-1-无量纲化">2-1-无量纲化</a></li><li><a href="#2-2-对定量特征二值化">2-2-对定量特征二值化</a></li><li><a href="#2-3-对定性特征哑编码">2-3-对定性特征哑编码</a></li><li><a href="#2-4-缺失值计算">2-4-缺失值计算</a></li><li><a href="#2-5-数据变换">2-5-数据变换</a></li></ul></li><li><a href="#3-特征工程">3-特征工程</a><ul><li><a href="#3-1-特征选择">3-1-特征选择</a><ul><li><a href="#3-1-1-过滤式选择（Filter）">3-1-1-过滤式选择（Filter）</a></li><li><a href="#3-1-2-包裹式选择（Wrapper）">3-1-2-包裹式选择（Wrapper）</a></li><li><a href="#3-1-3-嵌入式选择（Embedded）">3-1-3-嵌入式选择（Embedded）</a></li></ul></li><li><a href="#3-2-降维">3-2-降维</a><ul><li><a href="#3-2-1-主成分分析法（PCA）">3-2-1-主成分分析法（PCA）</a></li><li><a href="#3-2-2-线性判别分析法（LDA）">3-2-2-线性判别分析法（LDA）</a></li></ul></li></ul></li><li><a href="#4-模型选择">4-模型选择</a><ul><li><a href="#4-1-模型训练">4-1-模型训练</a></li><li><a href="#4-2-交叉验证">4-2-交叉验证</a></li></ul></li><li><a href="#5-集成学习">5-集成学习</a><ul><li><a href="#">堆叠</a></li></ul></li><li><a href="#6-管道">6-管道</a></li></ul><h4 id="1-数据探索"><a href="#1-数据探索" class="headerlink" title="1-数据探索"></a>1-数据探索</h4><ul><li>工具：Pandas、Matplotlib、Seaborn、Numpy、Jupyter Notebook</li><li><code>EDA</code> (Exploratory Data Analysis)，对数据进行探索性的分析</li></ul><h5 id="1-1-可视化"><a href="#1-1-可视化" class="headerlink" title="1-1-可视化"></a>1-1-可视化</h5><ul><li>常见图表和方法：<ul><li>查看目标变量的分布：绘制变量之间两两的分布和相关度图表</li><li>变量：用 Box Plot 来直观地查看它的分布</li><li>坐标数据：用 Scatter Plot 来查看它们的分布趋势和是否有离群点的存在</li><li>分类问题：将数据根据 Label 的不同着不同的颜色绘制出来，这对 Feature 的构造很有帮助</li><li>绘制变量之间两两的分布和相关度图表</li></ul></li></ul><h4 id="2-数据预处理"><a href="#2-数据预处理" class="headerlink" title="2-数据预处理"></a>2-数据预处理</h4><ul><li>工具：Jupyter Notebook、Sklearn、Pandas、Numpy、Matplotlib</li><li>存在问题：<ul><li><code>不属于同一量纲</code></li><li><code>信息冗余</code></li><li><code>定性特征不能直接使用</code></li><li><code>将定性特征转换为定量特征</code></li><li><code>存在缺失值</code></li><li><code>信息利用率低</code></li></ul></li></ul><h5 id="2-1-无量纲化"><a href="#2-1-无量纲化" class="headerlink" title="2-1-无量纲化"></a>2-1-无量纲化</h5><p>无量纲化使不同规格的数据转换到同一规格。</p><ul><li><code>标准化</code>：标准化需要计算特征的均值和标准差：$$x^{‘} = \frac{x - \bar{x}}{S}$$</li><li><code>区间缩放法</code>：区间缩放法的思路有多种，常见的一种为利用两个最值进行缩放：$$x^{‘} = \frac{x - Min}{Max - Min}$$</li><li><code>归一化</code>：归一化是依照特征矩阵的行处理数据，其目的在于样本向量在点乘运算或其他核函数计算相似性时，拥有统一的标准，也就是说都转化为“单位向量”：$$x^{‘} = \frac{x}{\sqrt{\sum_j^m x[j]^2}}$$</li></ul><h5 id="2-2-对定量特征二值化"><a href="#2-2-对定量特征二值化" class="headerlink" title="2-2-对定量特征二值化"></a>2-2-对定量特征二值化</h5><ul><li>定量特征二值化的核心在于设定一个阈值，大于阈值的赋值为1，小于等于阈值的赋值为0：</li></ul><p>$$x^{‘} =<br>\left{\begin{matrix}<br> 1, x &gt; threshold \<br> 0, x &lt;= threshold<br>\end{matrix}\right.<br>$$</p><h5 id="2-3-对定性特征哑编码"><a href="#2-3-对定性特征哑编码" class="headerlink" title="2-3-对定性特征哑编码"></a>2-3-对定性特征哑编码</h5><h5 id="2-4-缺失值计算"><a href="#2-4-缺失值计算" class="headerlink" title="2-4-缺失值计算"></a>2-4-缺失值计算</h5><h5 id="2-5-数据变换"><a href="#2-5-数据变换" class="headerlink" title="2-5-数据变换"></a>2-5-数据变换</h5><ul><li>常见的数据变换有基于多项式的、基于指数函数的、基于对数函数的</li></ul><h4 id="3-特征工程"><a href="#3-特征工程" class="headerlink" title="3-特征工程"></a>3-特征工程</h4><ul><li>工具：Sklearn、Pandas、Numpy、Matplotlib、Jupyter Notebook或vscode</li></ul><h5 id="3-1-特征选择"><a href="#3-1-特征选择" class="headerlink" title="3-1-特征选择"></a>3-1-特征选择</h5><h6 id="3-1-1-过滤式选择（Filter）"><a href="#3-1-1-过滤式选择（Filter）" class="headerlink" title="3-1-1-过滤式选择（Filter）"></a>3-1-1-过滤式选择（Filter）</h6><p>先对数据集进行特征选择，然后再训练学习器，特征选择过程与后续学习器无关。</p><ul><li><code>方差选择法</code>：使用方差选择法，先要计算各个特征的方差，然后根据阈值，选择方差大于阈值的特征</li><li><code>相关系数法</code>：使用相关系数法，先要计算各个特征对目标值的相关系数以及相关系数的P值</li><li><code>卡方检验</code>：经典的卡方检验是检验定性自变量对定性因变量的相关性。假设自变量有N种取值，因变量有M种取值，考虑自变量等于i且因变量等于j的样本频数的观察值与期望的差距，构建统计量：$$x^2 = \sum \frac{(A - E)^2}{E}$$</li><li><code>互信息法</code>：经典的互信息也是评价定性自变量对定性因变量的相关性的，互信息计算公式如下：$$I(X;Y) = \sum_{x \epsilon X} \sum_{y \epsilon Y} p(x, y) \log \frac{p(x, y)}{p(x) p(y)}$$</li></ul><h6 id="3-1-2-包裹式选择（Wrapper）"><a href="#3-1-2-包裹式选择（Wrapper）" class="headerlink" title="3-1-2-包裹式选择（Wrapper）"></a>3-1-2-包裹式选择（Wrapper）</h6><p>选择直接把最终将要使用的学习器的性能作为特征子集的评价标准。</p><ul><li><code>递归特征消除法</code>：递归消除特征法使用一个基模型来进行多轮训练，每轮训练后，消除若干权值系数的特征，再基于新的特征集进行下一轮训练。</li></ul><h6 id="3-1-3-嵌入式选择（Embedded）"><a href="#3-1-3-嵌入式选择（Embedded）" class="headerlink" title="3-1-3-嵌入式选择（Embedded）"></a>3-1-3-嵌入式选择（Embedded）</h6><p>将特征选择过程与学习器训练过程融为一体，两者在同一个优化过程中完成，即在学习器训练过程中自动地进行了特征选择。</p><ul><li><code>基于惩罚项的特征选择法</code>：使用带惩罚项的基模型，除了筛选出特征外，同时也进行了降维</li><li><code>基于树模型的特征选择法</code>：树模型中GBDT也可用来作为基模型进行特征选择</li></ul><h5 id="3-2-降维"><a href="#3-2-降维" class="headerlink" title="3-2-降维"></a>3-2-降维</h5><p>高维情形下经常会碰到数据样本稀疏、距离计算困难的问题（称为 “维数灾难”），解决方法就是降维。有很多方法，下面是主要的两种方法：</p><h6 id="3-2-1-主成分分析法（PCA）"><a href="#3-2-1-主成分分析法（PCA）" class="headerlink" title="3-2-1-主成分分析法（PCA）"></a>3-2-1-主成分分析法（PCA）</h6><h6 id="3-2-2-线性判别分析法（LDA）"><a href="#3-2-2-线性判别分析法（LDA）" class="headerlink" title="3-2-2-线性判别分析法（LDA）"></a>3-2-2-线性判别分析法（LDA）</h6><h4 id="4-模型选择"><a href="#4-模型选择" class="headerlink" title="4-模型选择"></a>4-模型选择</h4><ul><li>工具：vscode、conda、boost相关（xgboost/catboost/lightgbm）</li><li>常用算法：<ul><li>Gradient Boosting</li><li>Random Forest</li><li>Extra Randomized Trees</li><li>SVM</li><li>Linear Regression</li><li>Logistic Regression</li><li>Neural Networks</li></ul></li></ul><h5 id="4-1-模型训练"><a href="#4-1-模型训练" class="headerlink" title="4-1-模型训练"></a>4-1-模型训练</h5><h5 id="4-2-交叉验证"><a href="#4-2-交叉验证" class="headerlink" title="4-2-交叉验证"></a>4-2-交叉验证</h5><h4 id="5-集成学习"><a href="#5-集成学习" class="headerlink" title="5-集成学习"></a>5-集成学习</h4><ul><li>常见的 Ensemble 方法：<ul><li><code>Bagging</code></li><li><code>Boosting</code></li><li><code>Blending</code></li><li><code>Stacking</code></li></ul></li><li>从理论上讲，Ensemble 要成功，有两个要素：<ul><li>Base Model 之间的相关性要尽可能的小</li><li>Base Model 之间的性能表现不能差距太大</li></ul></li></ul><h4 id="6-管道"><a href="#6-管道" class="headerlink" title="6-管道"></a>6-管道</h4><ul><li>管道：管道是保持数据处理和建模代码组织的简单方法。具体来说，管道束预处理和建模步骤，这样您就可以像使用单个步骤一样使用整个束。<ul><li>优点：<ul><li>整洁的代码</li><li>较少的bug</li><li>更容易重构</li><li>模型测试有更多选项</li></ul></li></ul></li><li>作用：<ul><li><code>模块化 | 特征变换</code>：只需写很少的代码就能将新的 Feature 更新到训练集中</li><li><code>自动化 | 网格搜索</code>：只要预先设定好使用的 Model 和参数的候选，就能自动搜索并记录最佳的 Model</li><li><code>自动化 | 集成学习</code>：每个一段时间将现有最好的 K 个 Model 拿来做 Ensemble</li></ul></li></ul><html><br>    <table style="margin-left: auto; margin-right: auto;"><br>        <tr><br>            <td colspan="2"><br>                <h6 style="text-align:center;">提供两个脑图，以供参考</h6><br>            </td><br>        </tr><br>        <tr><br>            <td><br>                <!--左侧内容--><br>                <img src="/2019/01/21/ML-Match/特征工程.jpg"><br>            </td><br>            <td><br>                <!--右侧内容--><br>                <img src="/2019/01/21/ML-Match/kaggle-特征工程.png"><br>            </td><br>        </tr><br>    </table><br></html><table><thead><tr><th style="text-align:center">Sklearn类</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">StandardScaler</td><td style="text-align:center">无量纲化</td></tr><tr><td style="text-align:center">MinMaxScaler</td><td style="text-align:center">无量纲化</td></tr><tr><td style="text-align:center">Normalizer</td><td style="text-align:center">归一化</td></tr><tr><td style="text-align:center">Binarizer</td><td style="text-align:center">二值化</td></tr><tr><td style="text-align:center">OneHotEncoder</td><td style="text-align:center">哑编码</td></tr><tr><td style="text-align:center">Imputer</td><td style="text-align:center">缺失值计算</td></tr><tr><td style="text-align:center">PolynomialFeatures</td><td style="text-align:center">多项式数据转换</td></tr><tr><td style="text-align:center">FunctionTransformer</td><td style="text-align:center">自定义单元数据转换</td></tr><tr><td style="text-align:center">VarianceThreshold</td><td style="text-align:center">Filter</td></tr><tr><td style="text-align:center">SelectKBest</td><td style="text-align:center">Filter</td></tr><tr><td style="text-align:center">RFE</td><td style="text-align:center">Wrapper</td></tr><tr><td style="text-align:center">SelectFromModel</td><td style="text-align:center">Embedded</td></tr><tr><td style="text-align:center">decomposition</td><td style="text-align:center">PCA</td></tr><tr><td style="text-align:center">lda</td><td style="text-align:center">LDA</td></tr></tbody></table><h6 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h6><ul><li><a href="https://dnc1994.com/2016/04/rank-10-percent-in-first-kaggle-competition/" target="_blank" rel="noopener">如何在 Kaggle 首战中进入前 10%</a></li><li><a href="http://www.cnblogs.com/jasonfreak/p/5448385.html" target="_blank" rel="noopener">使用sklearn做单机特征工程</a></li><li><a href="https://www.kaggle.com/benhamner/python-data-visualizations" target="_blank" rel="noopener">一个很好的可视化示例</a></li><li><a href="https://www.kaggle.com/dansbecker/pipelines" target="_blank" rel="noopener">一个很好的pipeline示例</a></li><li><a href="https://www.kaggle.com/pouryaayria/a-complete-ml-pipeline-tutorial-acu-86" target="_blank" rel="noopener">一个很好的pipeline示例</a></li><li><a href="chrome-extension://ikhdkkncnoglghljlkmcimlnlhkeamad/pdf-viewer/web/viewer.html?file=http%3A%2F%2Fwww.ke.tu-darmstadt.de%2Flehre%2Farbeiten%2Fstudien%2F2015%2FDong_Ying.pdf" target="_blank" rel="noopener">轻而易举地击败 Kaggle</a></li><li><a href="https://zhuanlan.zhihu.com/p/33466906" target="_blank" rel="noopener">科技巨头都爱的Data Pipeline，如何自动化你的数据工作？</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;“样本和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已！”&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;思路流程&quot;&gt;&lt;a href=&quot;#思路流程&quot; class=&quot;headerlink&quot; title=&quot;思路流程&quot;&gt;&lt;/a&gt;思路流程&lt;/h3&gt;&lt;ul&gt;

      
    
    </summary>
    
      <category term="DataMining" scheme="https://www.fuweihu.xyz/categories/DataMining/"/>
    
    
      <category term="Match" scheme="https://www.fuweihu.xyz/tags/Match/"/>
    
  </entry>
  
  <entry>
    <title>Pandas手册</title>
    <link href="https://www.fuweihu.xyz/2019/01/20/Pandas%E6%89%8B%E5%86%8C/"/>
    <id>https://www.fuweihu.xyz/2019/01/20/Pandas手册/</id>
    <published>2019-01-20T04:06:25.000Z</published>
    <updated>2019-05-25T14:32:19.850Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这个不是全部API，而是大部分常用的，详细的API介绍还是移步<a href="http://pandas.pydata.org/pandas-docs/stable/" target="_blank" rel="noopener">官网</a></strong></p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li>系列(Series) | 1维 | 大小不变</li><li>数据帧(DataFrame) | 2维 | 大小可变的表结构与潜在的异质类型的列</li><li>面板(Panel) | 3维 | 大小可变数组</li></ul><h3 id="系列"><a href="#系列" class="headerlink" title="系列"></a>系列</h3><ul><li><code>s = pd.Series(data=ndarray/list/constants, index, dtype, copy=false/true)</code>  创建</li></ul><h3 id="数据帧"><a href="#数据帧" class="headerlink" title="数据帧"></a>数据帧</h3><ul><li><code>pandas.DataFrame(data=ndarray/series/map/lists/dict/constant/DataFrame, index, columns, dtype, copy=false/true)</code>  创建</li><li><code>df[&#39;col&#39;]</code>  列选择</li><li><code>df[&#39;col&#39;] = df[&#39;col_1&#39;] + df[&#39;col_2&#39;]</code>  列添加</li><li><code>del df[&#39;col&#39;]</code> 或者 <code>df.pop(&#39;col&#39;)</code>  列删除</li><li><code>df.loc(&#39;index&#39;)</code>  行选择 按标签</li><li><code>df.iloc[col_index_num]</code>  行选择 按整数位置</li><li><code>df[start:end]</code>  行切片</li><li><code>df.append(df_tmp)</code>  附加行</li><li><code>df.drop(row_index_num)</code>  删除行</li></ul><h3 id="面板"><a href="#面板" class="headerlink" title="面板"></a>面板</h3><ul><li><code>pandas.Panel(data=ndarray/series/map/lists/dict/constant/DataFrame, items=0, major_axis=1, minor_axis=2, dtype, copy=false/true)</code>  创建（items：每个项目对应于内部包含的数据帧(DataFrame)；major_axis：它是每个数据帧(DataFrame)的索引(行)；minor_axis：它是每个数据帧(DataFrame)的列。）</li><li><code>p[&#39;df_num&#39;]</code>  选择数据 使用Item</li><li><code>p.major_axis(row_num)</code>  选择数据 行</li><li><code>p.minor_axis(col_num)</code>  选择数据 列</li></ul><h3 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h3><ul><li>系列<ul><li><code>s.axes</code>  返回系列的标签列表</li><li><code>s.dtype</code>  返回对象的数据类型</li><li><code>s.empty</code>  返回布尔值，True表示对象是否为空</li><li><code>s.ndim</code>  返回对象的维数</li><li><code>s.size</code>  返回系列的长度</li><li><code>s.values</code>  以数组形式返回系列中的实际数据值</li><li><code>s.head(n)</code>  返回前n行</li><li><code>s.tail(n)</code>  返回最后n行</li></ul></li><li>数据帧<ul><li><code>df.T</code>  转置行和列</li><li><code>df.axes</code>  返回行轴标签和列轴标签列表</li><li><code>df.dtypes</code>  返回每列的数据类型</li><li><code>df.empty</code>  返回布尔值，True表示对象是否为空</li><li><code>df.ndim</code>  返回对象的维数</li><li><code>df.shape</code>  返回表示维度的元组</li><li><code>df.size</code>  返回元素数</li><li><code>df.values</code>  将实际数据作为NDarray返回</li><li><code>df.head(n)</code>  返回前n行</li><li><code>df.tail(n)</code>  返回最后n行</li></ul></li><li>描述性统计<ul><li><code>df.sum(axis_n)</code>  返回所请求轴的值的总和</li><li><code>df.mean()</code>  返回平均值</li><li><code>df.std()</code>  返回数字列的Bressel标准偏差</li><li><code>df.count()</code>  返回非空观测数量</li><li><code>df.median()</code>  返回所有值的中位数</li><li><code>df.mode()</code>  返回值的模值</li><li><code>df.min()</code>  返回所有值中的最小值</li><li><code>df.max()</code>  所有值中的最大值</li><li><code>df.abs()</code>  返回绝对值</li><li><code>df.prod()</code>  返回数组元素的乘积</li><li><code>df.cumsum()</code>  返回累计总和</li><li><code>df.cumprod()</code>  返回累计乘积</li><li><code>df.describe(include=&#39;object/number/all&#39;)</code>  返回有关列的统计信息的摘要（object：汇总字符串列；number：汇总数字列；all：将所有列汇总在一起。）</li></ul></li></ul><h3 id="函数引用"><a href="#函数引用" class="headerlink" title="函数引用"></a>函数引用</h3><ul><li><code>df.pipe()</code>  表格函数应用：可以通过将函数和适当数量的参数作为管道参数来执行自定义操作</li><li><code>df.apply()</code>  行或列合理函数应用</li><li><code>df.applymap()</code>  元素合理函数应用</li></ul><h3 id="重建索引"><a href="#重建索引" class="headerlink" title="重建索引"></a>重建索引</h3><ul><li><code>df.reindex(df_tmp, method=&#39;ffill/backfill/nearest&#39;, limit=n)</code>  重建索引</li><li><code>df.rename(inplace=False/True)</code>  重命名：方法允许基于一些映射(字典或者系列)或任意函数来重新标记一个轴</li></ul><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><ul><li><code>df.iteritems()</code>  迭代(key，value)对</li><li><code>df.iterrows()</code>  将行迭代为(索引，系列)对</li><li><code>df.itertuples()</code>  以namedtuples的形式迭代行</li></ul><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul><li><code>df.sort_index(axis=0/1, ascending=True/False)</code>  按标签排序</li><li><code>df.sort_values(by, kind=&#39;mergeesort/heapsort/quicksort&#39;)</code>  按值排序（by列名称；kind排序算法）</li></ul><h3 id="字符串和文本数据"><a href="#字符串和文本数据" class="headerlink" title="字符串和文本数据"></a>字符串和文本数据</h3><ul><li><code>lower()</code>  将Series/Index中的字符串转换为小写</li><li><code>upper()</code>  将Series/Index中的字符串转换为大写</li><li><code>len()</code>  计算字符串长度</li><li><code>strip()</code>  帮助从两侧的系列/索引中的每个字符串中删除空格(包括换行符)</li><li><code>split(&#39; &#39;)</code>  用给定的模式拆分每个字符串</li><li><code>cat(sep=&#39; &#39;)</code>  使用给定的分隔符连接系列/索引元素</li><li><code>get_dummies()</code>  返回具有单热编码值的数据帧(DataFrame)</li><li><code>contains(pattern)</code>  如果元素中包含子字符串，则返回每个元素的布尔值True，否则为False</li><li><code>replace(a,b)</code>  将值a替换为值b</li><li><code>repeat(value)</code>  重复每个元素指定的次数</li><li><code>count(pattern)</code>  返回模式中每个元素的出现总数</li><li><code>startswith(pattern)</code>  如果系列/索引中的元素以模式开始，则返回true</li><li><code>endswith(pattern)</code>  如果系列/索引中的元素以模式结束，则返回true</li><li><code>find(pattern)</code>  返回模式第一次出现的位置</li><li><code>findall(pattern)</code>  返回模式的所有出现的列表</li><li><code>swapcase</code>  变换字母大小写</li><li><code>islower()</code>  检查系列/索引中每个字符串中的所有字符是否小写，返回布尔值</li><li><code>isupper()</code>  检查系列/索引中每个字符串中的所有字符是否大写，返回布尔值</li><li><code>isnumeric()</code>  检查系列/索引中每个字符串中的所有字符是否为数字，返回布尔值</li></ul><h3 id="选项和自定义"><a href="#选项和自定义" class="headerlink" title="选项和自定义"></a>选项和自定义</h3><ul><li><code>pd.get_option(param=&#39;display.max_rows/display.max_columns&#39;)</code>  需要一个参数，并返回下面输出中给出的值</li><li><code>pd.set_option(param=&#39;display.max_rows/display.max_columns&#39;, value)</code>  需要两个参数，并将该值设置为指定的参数值</li><li><code>pd.reset_option(param=&#39;display.max_rows/display.max_columns&#39;)</code>  接受一个参数，并将该值设置为默认值</li><li><code>pd.describe_option(param=&#39;display.max_rows/display.max_columns&#39;)</code>  打印参数的描述</li><li><code>pd.option_context()</code>  上下文管理器用于临时设置语句中的选项</li><li>常用参数：<ul><li><code>display.max_rows</code>  要显示的最大行数</li><li><code>display.max_columns</code>  要显示的最大列数</li><li><code>display.expand_frame_repr</code>  显示数据帧以拉伸页面</li><li><code>display.max_colwidth</code>  显示最大列宽</li><li><code>display.precision</code>  显示十进制数的精度</li></ul></li></ul><h3 id="索引和选择数据"><a href="#索引和选择数据" class="headerlink" title="索引和选择数据"></a>索引和选择数据</h3><ul><li><code>df.loc[&#39;row_start&#39;:&#39;row_end&#39;, &#39;col_start&#39;:&#39;col_end&#39;]</code>  完成基于标签的索引</li><li><code>df.iloc[row_start:row_end, col_start:col_end]</code>  获得纯整数索引</li><li><code>df.ix[row_start:row_end, col_start:col_end]</code>  运算符进行选择和子集化对象的混合方法</li><li>使用符号<ul><li><code>s.loc[indexer]</code>  Series</li><li><code>df.loc[row_index,col_index]</code>  DataFrame</li><li><code>p.loc[item_index,major_index, minor_index]</code>  Panel</li></ul></li><li><code>df.index</code>  属性访问（可以使用属性运算符.来选择列）</li></ul><h3 id="统计函数"><a href="#统计函数" class="headerlink" title="统计函数"></a>统计函数</h3><ul><li><code>df.pct_change()</code>  将每个元素与其前一个元素进行比较，并计算变化百分比</li><li><code>df.cov(df_tmp)</code>  协方差</li><li><code>df.corr()</code>  相关性（相关性显示了任何两个数值(系列)之间的线性关系）</li><li><code>s.rank()</code>  数据排名</li></ul><h3 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h3><ul><li><code>df.rolling(window=n)</code>  n窗口大小的统计值（后加句点式统计函数）</li><li><code>df.expanding(min_periods=n)</code>  n窗口大小的统计值（累计计算）</li><li><code>df.ewm(com, span, halflife)</code>  n窗口大小的统计值</li></ul><h3 id="缺失数据"><a href="#缺失数据" class="headerlink" title="缺失数据"></a>缺失数据</h3><ul><li><code>df.isnull()</code>  检查缺失值，为空返回True</li><li><code>df.notnull()</code>  检查缺失值，不为空返回True</li><li>在求和数据时，NA将被视为0</li><li><code>df.fillna(n)</code>  用标量值n替换NaN</li><li><code>df.fillna(method=&#39;fill/backfill&#39;)</code>  填写NA前进和后退（fill填充方法向前；backfill填充方法向后）</li></ul><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><ul><li><code>obj.groupby(‘key’)</code> 或 <code>obj.groupby([‘key1’,’key2’])</code> 或 <code>obj.groupby(key,axis=1)</code>  将数据拆分成组</li><li><code>df.get_group(&#39;&#39;)</code>  选择一个分组</li><li><code>df_group.transform(lambda)</code>  转换（分组或列上的转换返回索引大小与被分组的索引相同的对象）</li><li><code>df.groupby(&#39;&#39;).filter(lambda_func)</code>  过滤（过滤根据定义的标准过滤数据并返回数据的子集）</li></ul><h3 id="合并-拼接"><a href="#合并-拼接" class="headerlink" title="合并/拼接"></a>合并/拼接</h3><ul><li><code>pd.merge(left, right, how=&#39;inner/outer/left/right&#39;, on=None, left_on=None, right_on=None,left_index=False, right_index=False, sort=True)</code>  （left一个DataFrame对象；right另一个DataFrame对象；on列(名称)连接，必须在左和右DataFrame对象中存在(找到)；left_on左侧DataFrame中的列用作键，可以是列名或长度等于DataFrame长度的数组；right_on 来自右的DataFrame的列作为键，可以是列名或长度等于DataFrame长度的数组；left_index如果为True，则使用左侧DataFrame中的索引(行标签)作为其连接键；how是left, right, outer以及inner之中的一个，默认为内inner；sort照字典顺序通过连接键对结果DataFrame进行排序）</li></ul><h3 id="级联"><a href="#级联" class="headerlink" title="级联"></a>级联</h3><ul><li><code>pd.concat(objs, axis=0, join=&#39;outer/inner&#39;, join_axes=None, ignore_index=False)</code>  连接对象（objs是Series，DataFrame或Panel对象的序列或映射；axis是连接的轴；join如何处理其他轴上的索引；join_axes是Index对象的列表；ignore_index是否使用连接轴上的索引值）</li><li><code>df.append(df_tmp)</code>  使用附加连接</li><li><code>pd.datetime.now()</code>  获取当前的日期和时间</li><li><code>pd.date_range(&quot;start&quot;, &quot;end&quot;, freq=&quot;&quot;).time</code>  创建一个时间范围</li><li><code>pd.to_datetime()</code>  转换为时间戳</li></ul><h3 id="日期功能"><a href="#日期功能" class="headerlink" title="日期功能"></a>日期功能</h3><ul><li><code>pd.date_range(&#39;data&#39;, periods=n, freq=&#39;&#39;)</code>  创建一个日期范围（freq更改日期频率）</li><li>偏移别名 略</li></ul><h3 id="时间差"><a href="#时间差" class="headerlink" title="时间差"></a>时间差</h3><ul><li><code>pd.Timedelta(&#39;&#39;)</code>  是时间上的差异，以不同的单位来表示</li></ul><h3 id="分类数据"><a href="#分类数据" class="headerlink" title="分类数据"></a>分类数据</h3><ul><li><code>pandas.Categorical(values, categories, ordered)</code>  分类构造函数</li><li><code>s.categories</code>  获取对象的类别</li><li><code>obj.ordered</code>  获取对象的顺序</li><li><code>s.cat.categories</code>  重命名类别</li><li><code>Categorical.add.categories()</code>  附加新类别</li><li><code>Categorical.remove_categories()</code>  删除类别</li><li>当ordered==True和类别是相同时，所有比较(\==，!=，&gt;，&gt;=，&lt;，和&lt;=)分类数据到另一个分类系列  分类数据的比较</li></ul><h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3><ul><li><code>df.plot()</code>  绘图</li><li><code>df.plot.bar(stacked=False/True)</code>  竖直条形图</li><li><code>df.plot.barh(stacked=True)</code>  水平条形图</li><li><code>df.plot.hist(bins=n)</code>  直方图</li><li><code>df.plot.box()</code>  箱型图</li><li><code>df.plot.area()</code>  区域块图</li><li><code>df.plot.scatter(x=&#39;a&#39;, y=&#39;b&#39;)</code>  散点图形</li><li><code>df.plot.pie(subplots=True)</code>  饼状图</li></ul><h3 id="IO工具"><a href="#IO工具" class="headerlink" title="IO工具"></a>IO工具</h3><ul><li><code>pd.read_csv(index_col=[&#39;col_index&#39;], dtype={&#39;col_name&#39;: dtype}, names=[&#39;name&#39;], skiprows=n)</code>  从csv文件中读取数据并创建一个DataFrame对象（dtype转换器；使用names参数指定标题的名称；skiprows跳过指定的行数）</li></ul><h3 id="稀疏数据"><a href="#稀疏数据" class="headerlink" title="稀疏数据"></a>稀疏数据</h3><ul><li><code>s.to_sparse()</code>  稀疏Dtypes（稀疏数据应该具有与其密集表示相同的dtype；支持float64，int64和booldtypes）</li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul><li><a href="http://pandas.pydata.org/pandas-docs/stable/api.html" target="_blank" rel="noopener">Pandas 官方文档</a></li><li><a href="https://morvanzhou.github.io/tutorials/data-manipulation/np-pd/1-1-why/" target="_blank" rel="noopener">莫凡Python | pandas</a></li><li><a href="https://www.yiibai.com/pandas/python_pandas_environment_setup.html" target="_blank" rel="noopener">易百教程 | Pandas教程</a></li><li><a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文文档</a></li><li><a href="https://apachecn.github.io/pandas-doc-zh/" target="_blank" rel="noopener">pandas:强大的Python数据分析工具包</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;这个不是全部API，而是大部分常用的，详细的API介绍还是移步&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;&lt;/stro
      
    
    </summary>
    
      <category term="Python" scheme="https://www.fuweihu.xyz/categories/Python/"/>
    
    
      <category term="Pandas" scheme="https://www.fuweihu.xyz/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>配置ML环境</title>
    <link href="https://www.fuweihu.xyz/2019/01/19/%E9%85%8D%E7%BD%AEML%E7%8E%AF%E5%A2%83/"/>
    <id>https://www.fuweihu.xyz/2019/01/19/配置ML环境/</id>
    <published>2019-01-19T13:06:25.000Z</published>
    <updated>2019-01-19T12:44:08.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置Anaconda"><a href="#配置Anaconda" class="headerlink" title="配置Anaconda"></a>配置Anaconda</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Anaconda指的是一个开源的Python发行版本，其包含了conda、Python等180多个科学包及其依赖项。因为包含了大量的科学包，Anaconda 的下载文件比较大。<br>这里就要说明下了，本人一直不喜欢conda的，毕竟太大了。一直在使用pip，但是又发现conda安装貌似还比pip好，pip的安装源不稳定和各种小问题吧。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><a href="https://www.anaconda.com/download/" target="_blank" rel="noopener">点击下载</a>anaconda</li><li>安装anaconda，点点点就好。。。</li><li>anaconda安装完成后</li><li>删除原有的python3<ul><li>切记pyhton2 不要删，unix系统有部分依赖于python2</li></ul></li><li>直接删除python3安装的文件夹</li><li>删除软连接<code>/usr/bin/</code><ul><li>pip3</li><li>python3</li></ul></li><li>找到anaconda的安装路径，我这里是<code>/Users/daidai/anaconda3/bin</code></li><li>添加软连接<ul><li><code>ln -s /Users/daidai/anaconda3/bin/python3 /usr/bin/python3</code></li><li><code>ln -s /Users/daidai/anaconda3/bin/pip /usr/bin/pip3</code></li></ul></li><li>添加环境变量<ul><li><code>sudo vi ~/.bash_profile</code>  打开环境变量的设置文件</li><li><code>export PATH=&quot;/Users/daidai/anaconda3/bin:$PATH&quot;</code>  注意填写自己的路径</li><li><code>source ~/.bash_profile</code>  刷新</li><li><code>conda list</code>  测试环境变量是否正确添加</li></ul></li><li><strong>Jupyter配置</strong><ul><li>安装Jupyter NbExtensions Configurator<ul><li><code>conda install -c conda-forge jupyter_contrib_nbextensions</code></li><li><code>conda install -c conda-forge jupyter_nbextensions_configurator</code></li></ul></li><li>选择插件<ul><li><code>Collapsible headings</code>  放下/收起notebook的某些内容</li><li><code>Notify</code>  Notify功能就能在任务处理完后及时向你发送通知</li><li><code>Codefolding</code>  折叠代码</li><li><code>Table of Contents</code>  自动生成目录</li><li><code>Autopep8</code>  pep8标准</li><li><code>ExecuteTime</code>  显示单元格的运行时间和耗时</li></ul></li><li>启动<ul><li><code>jupyter notebook</code>，浏览器进入<code>http://localhost:8888</code></li></ul></li></ul></li></ul><h3 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h3><h5 id="安装流行库"><a href="#安装流行库" class="headerlink" title="安装流行库"></a>安装流行库</h5><ul><li>xgboost <code>conda install py-xgboost</code></li><li>LightGBM <code>conda install lightgbm</code></li><li>CatBoost <code>pip3 install catboost</code></li><li>说明：<ul><li>这里lightgbm、XGBoost、catboost都支持GPU的，我这里是安装CPU版本的方法。</li><li>还有Sklearn是不支持GPU计算的，为了提高计算速度；使用CPU训练时，设置<code>n_jobs = -1</code>就是使用多核并行计算。</li></ul></li></ul><h5 id="服务器安装Jupyter"><a href="#服务器安装Jupyter" class="headerlink" title="服务器安装Jupyter"></a>服务器安装Jupyter</h5><ul><li>Docker<ul><li><a href="https://github.com/jupyterhub/binderhub" target="_blank" rel="noopener">https://github.com/jupyterhub/binderhub</a></li><li><a href="https://github.com/sagemathinc/cocalc" target="_blank" rel="noopener">https://github.com/sagemathinc/cocalc</a></li></ul></li><li>Web<ul><li><a href="https://github.com/jupyterhub/jupyterhub" target="_blank" rel="noopener">https://github.com/jupyterhub/jupyterhub</a></li></ul></li><li>Github 在线<ul><li><a href="https://notebooks.azure.com" target="_blank" rel="noopener">微软</a></li><li><a href="https://mybinder.org/" target="_blank" rel="noopener">https://mybinder.org/</a></li><li><a href="https://colab.research.google.com/" target="_blank" rel="noopener">Google</a></li></ul></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.jianshu.com/p/e009997ab5d8" target="_blank" rel="noopener">那些在线的Jupyter</a></li><li><a href="https://jupyter.org/documentation" target="_blank" rel="noopener">jupyter 官网</a></li><li><a href="https://github.com/jupyter/help/issues/89" target="_blank" rel="noopener">jupyter github-help</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;配置Anaconda&quot;&gt;&lt;a href=&quot;#配置Anaconda&quot; class=&quot;headerlink&quot; title=&quot;配置Anaconda&quot;&gt;&lt;/a&gt;配置Anaconda&lt;/h1&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Tools" scheme="https://www.fuweihu.xyz/categories/Tools/"/>
    
    
      <category term="Anaconda" scheme="https://www.fuweihu.xyz/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>Graph</title>
    <link href="https://www.fuweihu.xyz/2019/01/14/Graph/"/>
    <id>https://www.fuweihu.xyz/2019/01/14/Graph/</id>
    <published>2019-01-14T11:46:25.000Z</published>
    <updated>2019-01-16T00:23:57.029Z</updated>
    
    <content type="html"><![CDATA[<h3 id="图的概念"><a href="#图的概念" class="headerlink" title="图的概念"></a>图的概念</h3><ul><li>图的分类：<ul><li>有向图和无向图</li><li>有权图和无权图</li><li>连通图（从任意一个顶点都存在一条路径到达另一个任意顶点）和非连通图</li></ul></li></ul><h3 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h3><ul><li>邻接矩阵（建议5000*5000以下）</li></ul><p><img src="/2019/01/14/Graph/邻接矩阵.png" alt=""></p><ul><li>边的数组</li><li>邻接表</li></ul><p><img src="/2019/01/14/Graph/邻接表.png" alt=""></p><ul><li>链式前向星</li></ul><h3 id="DFS-和-BFS"><a href="#DFS-和-BFS" class="headerlink" title="DFS 和 BFS"></a>DFS 和 BFS</h3><p><img src="/2019/01/14/Graph/图.jpeg" alt=""></p><p>定义图结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">graph = &#123;</span><br><span class="line">    <span class="string">"A"</span>: [<span class="string">"B"</span>,<span class="string">"C"</span>],</span><br><span class="line">    <span class="string">"B"</span>: [<span class="string">"A"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>],</span><br><span class="line">    <span class="string">"C"</span>: [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"D"</span>,<span class="string">"E"</span>],</span><br><span class="line">    <span class="string">"D"</span>: [<span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"E"</span>,<span class="string">"F"</span>],</span><br><span class="line">    <span class="string">"E"</span>: [<span class="string">"C"</span>, <span class="string">"D"</span>],</span><br><span class="line">    <span class="string">"F"</span>: [<span class="string">"D"</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图<br>A的相邻元素为B、C<br>B的相邻元素为A、C、D<br>C的相邻元素为A、B、D、E<br>D的相邻元素为B、C、E、F<br>E的相邻元素为C、D<br>F的相邻元素为D</p><h5 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h5><ul><li>队列实现：队列，入队列，出队列</li></ul><p>BFS优先遍历当前节点的相邻节点，即若当前节点为A时，则继续遍历的节点为B和C；当A的所有相邻节点遍历完以后，再遍历A相邻节点B和C的所有相邻节点，以B为例，在遍历B的相邻节点时，由于A已被访问过，则需要标记为已访问，在遍历B的相邻节点时，不再需要访问A。以此类推，完成无向图的BFS。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BFS</span><span class="params">(graph, vertex)</span>:</span></span><br><span class="line">    <span class="comment"># 使用列表作为队列</span></span><br><span class="line">    queue = []</span><br><span class="line">    <span class="comment"># 将首个节点添加到队列中</span></span><br><span class="line">    queue.append(vertex)</span><br><span class="line">    <span class="comment"># 使用集合来存放已访问过的节点</span></span><br><span class="line">    looked = set()</span><br><span class="line">    <span class="comment"># 将首个节点添加到集合中表示已访问</span></span><br><span class="line">    looked.add(vertex)</span><br><span class="line">    <span class="comment"># 当队列不为空时进行遍历</span></span><br><span class="line">    <span class="keyword">while</span>(len(queue) &gt; <span class="number">0</span>):</span><br><span class="line">        <span class="comment"># 从队列头部取出一个节点并查询该节点的相邻节点</span></span><br><span class="line">        temp = queue.pop(<span class="number">0</span>)</span><br><span class="line">        nodes = graph[temp]</span><br><span class="line">        <span class="comment"># 遍历该节点的所有相邻节点</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> nodes:</span><br><span class="line">            <span class="comment"># 判断节点是否存在于已访问集合中,即是否已被访问过</span></span><br><span class="line">            <span class="keyword">if</span> w <span class="keyword">not</span> <span class="keyword">in</span> looked:</span><br><span class="line">                <span class="comment"># 若未被访问,则添加到队列中,同时添加到已访问集合中,表示已被访问</span></span><br><span class="line">                queue.append(w)</span><br><span class="line">                looked.add(w)</span><br><span class="line">        print(temp, end=<span class="string">' '</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    graph = &#123;</span><br><span class="line">        <span class="string">"A"</span>: [<span class="string">"B"</span>, <span class="string">"C"</span>],</span><br><span class="line">        <span class="string">"B"</span>: [<span class="string">"A"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>],</span><br><span class="line">        <span class="string">"C"</span>: [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>],</span><br><span class="line">        <span class="string">"D"</span>: [<span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"E"</span>, <span class="string">"F"</span>],</span><br><span class="line">        <span class="string">"E"</span>: [<span class="string">"C"</span>, <span class="string">"D"</span>],</span><br><span class="line">        <span class="string">"F"</span>: [<span class="string">"D"</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 由于无向图无根节点，则需要手动传入首个节点，此处以"A"为例</span></span><br><span class="line">    print(<span class="string">"BFS"</span>, end=<span class="string">"\t"</span>)</span><br><span class="line">    BFS(graph, <span class="string">"A"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"># 结果</span></span><br><span class="line"><span class="string">BFS     A B C D E F</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h5 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h5><ul><li>栈和回溯方式实现：栈，压栈，出栈</li><li>递归方式实现</li></ul><p>DFS优先遍历与当前节点0相邻的一个节点1，然后再访问与节点1相邻但与节点0不相邻的节点，即若当前节点为A，则继续遍历B或C，再访问与B或C节点相邻且与A节点不相邻的节点，即节点D或E，若没有未遍历过的相邻节点，则返回访问上一个有未被访问过相邻节点的节点进行访问，依此遍历整个图，完成无向图的DFS。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DFS</span><span class="params">(graph, vertex)</span>:</span></span><br><span class="line">    <span class="comment"># 使用列表作为栈</span></span><br><span class="line">    stack = []</span><br><span class="line">    <span class="comment"># 将首个元素添加到队列中</span></span><br><span class="line">    stack.append(vertex)</span><br><span class="line">    <span class="comment"># 使用集合来存放已访问过的节点</span></span><br><span class="line">    looked = set()</span><br><span class="line">    <span class="comment"># 将首个节点添加到集合中表示已访问</span></span><br><span class="line">    looked.add(vertex)</span><br><span class="line">    <span class="comment"># 当队列不为空时进行遍历</span></span><br><span class="line">    <span class="keyword">while</span> len(stack) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 从栈尾取出一个节点并查询该节点的相邻节点</span></span><br><span class="line">        temp = stack.pop()</span><br><span class="line">        nodes = graph[temp]</span><br><span class="line">        <span class="comment"># 遍历该节点的所有相邻节点</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> nodes:</span><br><span class="line">            <span class="comment"># 判断节点是否存在于已访问集合中,即是否已被访问过</span></span><br><span class="line">            <span class="keyword">if</span> w <span class="keyword">not</span> <span class="keyword">in</span> looked:</span><br><span class="line">                <span class="comment"># 若未被访问,则添加到栈中,同时添加到已访问集合中,表示已被访问</span></span><br><span class="line">                stack.append(w)</span><br><span class="line">                looked.add(w)</span><br><span class="line">        print(temp, end=<span class="string">' '</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    graph = &#123;</span><br><span class="line">        <span class="string">"A"</span>: [<span class="string">"B"</span>, <span class="string">"C"</span>],</span><br><span class="line">        <span class="string">"B"</span>: [<span class="string">"A"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>],</span><br><span class="line">        <span class="string">"C"</span>: [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>],</span><br><span class="line">        <span class="string">"D"</span>: [<span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"E"</span>, <span class="string">"F"</span>],</span><br><span class="line">        <span class="string">"E"</span>: [<span class="string">"C"</span>, <span class="string">"D"</span>],</span><br><span class="line">        <span class="string">"F"</span>: [<span class="string">"D"</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 由于无向图无根节点，则需要手动传入首个节点，此处以"A"为例</span></span><br><span class="line">    print(<span class="string">"DFS"</span>, end=<span class="string">"\t"</span>)</span><br><span class="line">    DFS(graph, <span class="string">"A"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"># 结果</span></span><br><span class="line"><span class="string">DFS     A C E D F B</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h5 id="DFS对比BFS"><a href="#DFS对比BFS" class="headerlink" title="DFS对比BFS"></a>DFS对比BFS</h5><table><thead><tr><th></th><th>DFS</th><th>BFS</th></tr></thead><tbody><tr><td>用途</td><td>搜索全部解</td><td>搜索最短路</td></tr><tr><td>优劣</td><td>占用内存较小</td><td>占用内存较大</td></tr></tbody></table><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BFS</span><span class="params">(graph, start, end)</span>:</span></span><br><span class="line">    <span class="comment"># 使用列表作为队列</span></span><br><span class="line">    queue = []</span><br><span class="line">    <span class="comment"># 将首个节点添加到队列中</span></span><br><span class="line">    queue.append(start)</span><br><span class="line">    <span class="comment"># 使用集合来存放已访问过的节点</span></span><br><span class="line">    looked = set()</span><br><span class="line">    <span class="comment"># 将首个节点添加到集合中表示已访问</span></span><br><span class="line">    looked.add(start)</span><br><span class="line">    <span class="comment"># 当队列不为空时进行遍历</span></span><br><span class="line">    <span class="keyword">while</span>(len(queue) &gt; <span class="number">0</span>):</span><br><span class="line">        <span class="comment"># 从队列头部取出一个节点并查询该节点的相邻节点</span></span><br><span class="line">        temp = queue.pop(<span class="number">0</span>)</span><br><span class="line">        nodes = graph[temp]</span><br><span class="line">        <span class="comment"># 遍历该节点的所有相邻节点</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> nodes:</span><br><span class="line">            <span class="comment"># 判断节点是否存在于已访问集合中,即是否已被访问过</span></span><br><span class="line">            <span class="keyword">if</span> w <span class="keyword">not</span> <span class="keyword">in</span> looked:</span><br><span class="line">                <span class="comment"># 若未被访问,则添加到队列中,同时添加到已访问集合中,表示已被访问</span></span><br><span class="line">                queue.append(w)</span><br><span class="line">                looked.add(w)</span><br><span class="line">            <span class="keyword">if</span> w == end:</span><br><span class="line">                print(temp, <span class="string">' '</span>, end)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        print(temp, end=<span class="string">' '</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DFS</span><span class="params">(graph, start, end)</span>:</span></span><br><span class="line">    <span class="comment"># 使用列表作为栈</span></span><br><span class="line">    stack = []</span><br><span class="line">    <span class="comment"># 将首个元素添加到队列中</span></span><br><span class="line">    stack.append(start)</span><br><span class="line">    <span class="comment"># 使用集合来存放已访问过的节点</span></span><br><span class="line">    looked = set()</span><br><span class="line">    <span class="comment"># 将首个节点添加到集合中表示已访问</span></span><br><span class="line">    looked.add(start)</span><br><span class="line">    <span class="comment"># 当队列不为空时进行遍历</span></span><br><span class="line">    <span class="keyword">while</span> len(stack) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 从栈尾取出一个节点并查询该节点的相邻节点</span></span><br><span class="line">        temp = stack.pop()</span><br><span class="line">        nodes = graph[temp]</span><br><span class="line">        <span class="comment"># 遍历该节点的所有相邻节点</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> nodes:</span><br><span class="line">            <span class="comment"># 判断节点是否存在于已访问集合中,即是否已被访问过</span></span><br><span class="line">            <span class="keyword">if</span> w <span class="keyword">not</span> <span class="keyword">in</span> looked:</span><br><span class="line">                <span class="comment"># 若未被访问,则添加到栈中,同时添加到已访问集合中,表示已被访问</span></span><br><span class="line">                stack.append(w)</span><br><span class="line">                looked.add(w)</span><br><span class="line">            <span class="keyword">if</span> w == end:</span><br><span class="line">                print(temp, <span class="string">' '</span>, end)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        print(temp, end=<span class="string">' '</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    graph = &#123;</span><br><span class="line">        <span class="string">"A"</span>: [<span class="string">"B"</span>, <span class="string">"C"</span>],</span><br><span class="line">        <span class="string">"B"</span>: [<span class="string">"A"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>],</span><br><span class="line">        <span class="string">"C"</span>: [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>],</span><br><span class="line">        <span class="string">"D"</span>: [<span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"E"</span>, <span class="string">"F"</span>],</span><br><span class="line">        <span class="string">"E"</span>: [<span class="string">"C"</span>, <span class="string">"D"</span>],</span><br><span class="line">        <span class="string">"F"</span>: [<span class="string">"D"</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 由于无向图无根节点，则需要手动传入首个节点，此处以"A"为例</span></span><br><span class="line">    print(<span class="string">"BFS"</span>, end=<span class="string">"\t"</span>)</span><br><span class="line">    BFS(graph, <span class="string">"A"</span>, <span class="string">"F"</span>)</span><br><span class="line">    print(<span class="string">"-----"</span>)</span><br><span class="line">    print(<span class="string">"DFS"</span>, end=<span class="string">"\t"</span>)</span><br><span class="line">    DFS(graph, <span class="string">"A"</span>, <span class="string">"F"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"># 结果</span></span><br><span class="line"><span class="string">BFS     A B C D   F</span></span><br><span class="line"><span class="string">-----</span></span><br><span class="line"><span class="string">DFS     A C E D   F</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;图的概念&quot;&gt;&lt;a href=&quot;#图的概念&quot; class=&quot;headerlink&quot; title=&quot;图的概念&quot;&gt;&lt;/a&gt;图的概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;图的分类：&lt;ul&gt;
&lt;li&gt;有向图和无向图&lt;/li&gt;
&lt;li&gt;有权图和无权图&lt;/li&gt;
&lt;li&gt;连通图（从任意一
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://www.fuweihu.xyz/categories/Algorithm/"/>
    
    
      <category term="Graph" scheme="https://www.fuweihu.xyz/tags/Graph/"/>
    
  </entry>
  
</feed>
